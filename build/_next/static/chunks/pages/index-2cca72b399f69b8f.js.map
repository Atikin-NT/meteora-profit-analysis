{"version":3,"file":"static/chunks/pages/index-2cca72b399f69b8f.js","mappings":"oFACA,CAAAA,OAAAC,QAAA,CAAAD,OAAAC,QAAA,MAAAC,IAAA,EACA,IACA,WACA,OAAeC,EAAQ,KACvB,EACA,uFKoBYC,wGJCL,eAAeC,EAAMC,CAAU,EACpC,OAAO,IAAIC,QAAQ,GAAaC,WAAWC,EAASH,GACtD,CAEO,eAAeI,EACpBC,CAAoB,MACpBL,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAK,IACLM,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAU,EACVC,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAa,EAEb,GAAI,CACF,OAAOF,GACT,CAAE,MAAOG,EAAK,CACZ,GAAIF,EAAUC,EAGZ,MAAM,MAFS,qBAA4CA,MAAAA,CAAvBF,EAAGI,QAAQ,GAAG,WAAoBC,MAAA,CAAXH,EAAW,aAMxE,OAFA,MAAMR,EAAMC,GAELI,EAAsBC,EAAIL,EAAAA,EAAQM,EAAU,EAAGC,EACxD,CACF,CAEA,MAAMI,EAgBJC,KAA+C,CAA3C,QAAAC,EAAAC,UAAAC,MAAA,CAAAC,EAAA,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAGD,CAAAA,CAAHC,EAAA,CAAAH,SAAA,CAAAG,EAAsB,CACxB,OAAO,IAAIhB,QAAQ,MAAOE,IACxB,IAAMe,EAAU,IAAI,CAACC,cAAc,CAACH,GAIpC,GAFA,IAAI,CAACI,aAAa,CAACF,EAASf,GAExB,CAAC,IAAI,CAACkB,SAAS,CAACC,GAAG,CAACJ,IAAY,IAAI,CAACK,gBAAgB,CAACL,GAAU,CAClE,IAAI,CAACG,SAAS,CAACG,GAAG,CAACN,GACnB,IAAMO,EAAW,MAAM,IAAI,CAACC,GAAG,IAAIV,GAE7BW,EAAW,IAAIC,OAAOC,OAAO,GAEnC,IAAI,CAACC,cAAc,CAACC,GAAG,CAACb,EAAS,CAAES,SAAAA,EAAUF,SAAAA,CAAS,GACtD,IAAI,CAACJ,SAAS,CAACW,MAAM,CAACd,GACtB,IAAI,CAACe,aAAa,CAACf,EACrB,CACA,IAAI,CAACe,aAAa,CAACf,EACrB,EACF,CAEQC,eAAeH,CAAmB,CAAE,CAC1C,OAAOkB,OAAOC,MAAM,CAACnB,GAClBoB,GAAG,CAAC,IACH,GAAI,CACF,OAAOC,KAAKC,SAAS,CAACC,EACxB,CAAE,MAAO/B,EAAK,CACZ,MAAO,EACT,CACF,GACCgC,IAAI,CAAC,GACV,CAEQjB,iBAAiBL,CAAe,CAAW,CACjD,IAAMO,EAAW,IAAI,CAACK,cAAc,CAAClB,GAAG,CAACM,GAEzC,MACE,CAACO,GACAA,GAAY,IAAIG,OAAOC,OAAO,GAAKJ,EAASE,QAAQ,CAAG,IAAI,CAACc,OAAO,CAIhErB,cACNF,CAAe,CACff,CAAqC,CACrC,CACA,IAAMuC,EAAgB,IAAI,CAACC,aAAa,CAAC/B,GAAG,CAACM,GAE7C,GAAIwB,EAAe,CACjBA,EAAc9C,IAAI,CAACO,GAEnB,MACF,CACA,IAAMyC,EAAgD,CAACzC,EAAQ,CAE/D,IAAI,CAACwC,aAAa,CAACZ,GAAG,CAACb,EAAS0B,EAClC,CAEQX,cAAcf,CAAe,CAAE,CACrC,IAAM2B,EAAQ,IAAI,CAACF,aAAa,CAAC/B,GAAG,CAACM,GAIrC,IAFI2B,EAAM9B,MAAM,CAAG,GAAM,IAAI,CAACM,SAAS,CAACC,GAAG,CAACJ,GAErC2B,EAAM9B,MAAM,CAAG,GAAK,CAAC,IAAI,CAACM,SAAS,CAACC,GAAG,CAACJ,IAC7C2B,CAAK,CAAC,EAAE,CAAC,IAAI,CAACf,cAAc,CAAClB,GAAG,CAACM,GAAUO,QAAQ,EACnDoB,EAAMC,KAAK,EAEf,CAzEAC,YAAYC,CAA+D,CAAE,MARrEL,aAAAA,CACN,IAAIM,SACEnB,cAAAA,CACN,IAAImB,SACE5B,SAAAA,CAAyB,IAAI6B,IAKnC,GAAM,CAAE7C,GAAAA,CAAE,CAAE8C,SAAAA,CAAQ,CAAEC,OAAAA,CAAM,CAAE,CAAGJ,CAEjC,KAAI,CAACtB,GAAG,CAAGyB,EAAWA,EAAS9C,GAAMA,EACrC,IAAI,CAACoC,OAAO,CAAGW,GAAkB,GACnC,CAqEF,CAEO,SAASC,EACdhD,CAAiD,CACjD8C,CAAuE,CACvEC,CAAe,EAEf,IAAME,EAAgB,IAAI3C,EAAuB,CAAEN,GAAAA,EAAI8C,SAAAA,EAAUC,OAAAA,CAAO,GAExE,OAAOE,EAAc1C,GAAG,CAAC2C,IAAI,CAACD,EAChC,CAEO,SAASA,EACdjD,CAAiD,CACjD+C,CAAe,EAEf,IAAME,EAAgB,IAAI3C,EAAuB,CAAEN,GAAAA,EAAI+C,OAAAA,CAAO,GAE9D,OAAOE,EAAc1C,GAAG,CAAC2C,IAAI,CAACD,EAChC,CAEO,SAASE,EAASC,CAAa,CAAEC,CAAY,EAClD,IAAIC,EAAM,EAUV,OARAF,EAAIG,OAAO,CAAC,IACV,IAAMrB,EAAQsB,CAAG,CAACH,EAAI,CAED,UAAjB,OAAOnB,GAAuBuB,MAAMvB,IACtCoB,CAAAA,GAAOpB,CAAAA,CAEX,GAEOoB,CACT,CAEO,SAASI,EAAON,CAAa,CAAEC,CAAY,EAChD,IAAIvB,EAAmB,EAAE,CAUzB,OARAsB,EAAIG,OAAO,CAAC,IACV,IAAMrB,EAAQsB,CAAG,CAACH,EAAI,CAED,UAAjB,OAAOnB,GAAuBuB,MAAMvB,IACtCJ,EAAOvC,IAAI,CAAC2C,EAEhB,GAEOyB,KAAKD,GAAG,IAAI5B,EACrB,CAEO,SAAS8B,EAAqBC,CAAgB,CAAEC,CAAY,EACjE,IAAMC,EAAUC,SAASC,aAAa,CAAC,KAEvCF,EAAQG,YAAY,CAClB,OACA,iCAAmCC,mBAAmBL,IAExDC,EAAQG,YAAY,CAAC,WAAYL,GAEjCE,EAAQK,KAAK,CAACC,OAAO,CAAG,OACxBL,SAASM,IAAI,CAACC,WAAW,CAACR,GAE1BA,EAAQS,KAAK,GAEbR,SAASM,IAAI,CAACG,WAAW,CAACV,EAC5B,CAyBO,SAASW,EACdb,CAAgB,CAChBc,CAAuB,EAEvBf,EAAqBC,EAAUe,SA3BJD,CAAuB,EAClD,GAAIA,GAAAA,EAASjE,MAAM,CACjB,MAAO,GAGT,IAAMmE,EAAShD,OAAOiD,IAAI,CAACH,CAAQ,CAAC,EAAE,EAAExC,IAAI,CAAC,KACvC4C,EAAkB,EAAE,CAc1B,OAZAJ,EAASpB,OAAO,CAAC,IACf,IAAMyB,EAAOnD,OAAOC,MAAM,CAAC0B,GACxBzB,GAAG,CAAC,GACHG,MAAAA,GAAyC,iBAAOA,EAC5C,IAAMA,EAAM9B,QAAQ,GAAG6E,OAAO,CAAC,KAAM,MAAQ,IAC7C,IAEL9C,IAAI,CAAC,KAER4C,EAAMxF,IAAI,CAACyF,EACb,GAEOH,EAAS,KAAOE,EAAM5C,IAAI,CAAC,KACpC,EAMqDwC,GACrD,CAYO,SAASO,EAAkBC,CAAgB,EAChD,IAAMC,EAAoBzB,KAAK0B,KAAK,CAACF,EAAW,KAC1CG,EAAU3B,KAAK0B,KAAK,CAACD,EAAoB,IAG/C,MAAO,GAAwCG,MAAAA,CAArCD,EAAU,EAAI,GAAWjF,MAAA,CAARiF,EAAQ,OAAO,IAAajF,MAAA,CAFvC+E,EAAoB,GAEmB,IACzD,CCpOA,IAAMI,EAAeC,CAAAA,EAAAA,EAAAA,CAAAA,EAAU,CAC7BC,MAAOC,OAAOC,EAAAA,EAAWA,EACzBC,SAAU,IACVC,OAAQ,EACV,GAEaC,EAGQ/C,EACnB,CAACgD,EAAwBC,IAChBlG,EAAsB,IAC3BmG,EAAAA,EAAIA,CAACC,MAAM,CAACH,EAAY,IAAII,EAAAA,SAASA,CAACH,KAG1CT,GAGqCxC,EACrC,MACEgD,EACAC,EACAI,KAKA,IAAMC,EAAW,MAAMP,EAAQC,EAAYC,GAErC,CAAEM,cAAAA,CAAa,CAAE,CAAG,MAAMD,EAASE,2BAA2B,CAClE,IAAIJ,EAAAA,SAASA,CAACC,IAGhB,MAAO,CAAEC,SAAAA,EAAUC,cAAAA,CAAc,CACnC,EACAf,GAGF,IAAMiB,EAA0BjB,EAC9B,MAAOQ,EAAwBU,EAAmBC,IACzC5G,EAAsB,IAC3BiG,EAAWS,uBAAuB,CAACC,EAAQ,CAAEC,OAAAA,CAAO,KAKnD,eAAeC,EACpBZ,CAAsB,CACtBa,CAAe,CACfC,CAAiE,CACjEC,CAAkB,MAGdJ,EADJ,IAAMD,EAAS,IAAIN,EAAAA,SAASA,CAACS,GAEzBG,EAA0C,EAAE,CAC1CC,EAA0C,EAAE,CAElD,GACEN,EACEK,EAActG,MAAM,CAAG,EACnBsG,CAAa,CAACA,EAActG,MAAM,CAAG,EAAE,CAACwG,SAAS,CACjDC,KAAAA,EAENF,EAAc1H,IAAI,IADlByH,EAAgB,MAAMP,EAAwBT,EAAYU,EAAQC,IAG9DG,GACFA,EAAkBE,SAEbA,GAAAA,EAActG,MAAM,CAAO,CAKpC,OAJIqG,GACFA,IAGKE,CACT,CAEO,IAAMG,EAIwC5B,EACnD,MAAOQ,EAAwBqB,IACtBtH,EAAsB,IAC3BiG,EAAWoB,qBAAqB,CAACC,EAAY,CAC3CC,+BAAgC,EAChCC,WAAY,WACd,KAKOC,EAKThC,EAAa,MAAOQ,EAAwBa,IACvC9G,EAAsB,IACpBiG,EAAWwB,oBAAoB,CAAC,IAAIpB,EAAAA,SAASA,CAACS,MAI5CY,EAAoCjC,EAC/C,MAAOQ,EAAwB0B,KAC7B,IAAMC,EAAS,IAAIC,EAAAA,EAAYA,CAAC,CAC9B,CACEC,IAAKC,EAAAA,EAAGA,CACRC,UAAWC,EAAAA,EAAkBA,EAEhC,EACKC,EAAK,MAAMN,EAAOO,gBAAgB,CAAClC,EAAY0B,EAAa,IAElE,GAAIO,KAAMd,GAANc,EACF,MAAO,EAAE,CAGX,IAAME,EAAYC,EADErG,GAAG,CAAC,GAAUsG,EAAKD,QAAQ,EAAEE,IAAI,GAC1BC,MAAM,CAAC,GAAaC,YAAAA,EAAQC,IAAI,SAE3D,EAQOC,MAAMC,IAAI,CAAC,IAAI9F,IAJIsF,EAAUpG,GAAG,CAAC,GACtC6G,EAASC,MAAM,CAACC,QAAQ,MAJjB,EAAE,GC1CFC,EAA+BtD,CAAAA,EAAAA,EAAAA,CAAAA,EAAU,CACpDC,MAAO,EACPG,SAAU,IACVC,OAAQ,EACV,GAEakD,EAA8BvD,CAAAA,EAAAA,EAAAA,CAAAA,EAAU,CACnDC,MAAO,EACPG,SAAU,IACVC,OAAQ,EACV,GAEMmD,EAAgBF,EAA6B,GACjDG,MAAMC,EAAAA,EAAWA,CAAGC,EAAAA,EAA6BA,CAAG,IAAMC,IAEtDC,EAAgBN,EAA4B,GAChDE,MACEC,EAAAA,EAAWA,CACTC,EAAAA,EAA6BA,CAC7B,IACAC,EACA,cAGAE,EAAiBP,EAA4B,GACjDE,MACEC,EAAAA,EAAWA,CACTC,EAAAA,EAA6BA,CAC7B,IACAC,EACA,eAkDC,eAAeG,EACpBH,CAAuB,EAEvB,IAAMI,EAA6B,MAAMR,EAAcI,GAEvD,GAAII,KAAAA,EAAiBC,MAAM,CAAS,CAClCC,QAAQC,IAAI,CAAC,YAA4BvJ,MAAA,CAAhBgJ,EAAgB,eAEzC,MACF,CAEA,GAAII,KAAAA,EAAiBC,MAAM,CAAS,CAClC,IAAMG,EAAS,2BAA2CxJ,MAAA,CAAhBgJ,EAG1C,OADAM,QAAQG,KAAK,CAACD,GACR,MAAUA,EAClB,CAEA,GAAI,CACF,IAAMjB,EACH,MAAMa,EAAiBM,IAAI,GAE9B,OAAOC,EAAmBpB,EAC5B,CAAE,MAAOzI,EAAK,CACZwJ,QAAQC,IAAI,CAAC,YAA4BvJ,MAAA,CAAhBgJ,EAAgB,eACzCM,QAAQG,KAAK,CAAC3J,GAEd,MACF,CACF,CAEA,eAAe6J,EAAmBpB,CAA6B,EAC7D,GAAM,CAACqB,EAAkBC,EAAkB,CAAG,MAAMtK,QAAQuK,GAAG,CAAC,CAC9Db,EAAcV,EAAS/B,OAAO,EAC9B0C,EAAeX,EAAS/B,OAAO,EAChC,EAEK,CAACuD,EAAUC,EAAU,CAAG,MAAMzK,QAAQuK,GAAG,CAAC,CAC9CF,EAAiBF,IAAI,GACrBG,EAAkBH,IAAI,GACvB,EAED,MAAO,CACLnB,SAAAA,EACAwB,SAAAA,EACAC,UAAAA,CACF,CACF,CA9FuBrB,EAA4B,GACjDE,MACEC,EAAAA,EAAWA,CACTC,EAAAA,EAA6BA,CAC7B,IACAC,EACA,gBAGoBL,EACxB,GACEE,MACEC,EAAAA,EAAWA,CACTC,EAAAA,EAA6BA,CAC7B,IACAC,EACA,mBAgFD,IAAMiB,EAAWrH,EACtB,qBAAOsH,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAA0BrB,MACzBsB,EAAe,MAAMD,EAAQpB,EAAAA,EAAWA,CAAGsB,EAAAA,EAAyBA,EACpEC,EAAQ1I,KAAK2I,KAAK,CAAC,MAAMH,EAAa1G,IAAI,IAEhD,MAAO,CACL8G,YAAa,IAAIrJ,OAAOC,OAAO,GAC/BkJ,MAAAA,CACF,CACF,GAGK,eAAeG,EACpBC,CAAmB,MACnBP,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAA0BrB,MAI1B,MAAOwB,CAFO,MAAMJ,EAASC,EAAAA,EAEhBG,KAAK,CAACK,IAAI,CAAC,GAAUC,EAAKnE,OAAO,EAAIiE,EACpD,CCjOO,IAAMG,EAAWhI,EACtB,MAAOiI,IACL,IAAM9J,EAAW,MAAM8H,MAAMiC,EAAAA,EAAiBA,CAAGD,GAGjD,MAAOE,CAFe,MAAMhK,EAAS2I,IAAI,IAErB1B,IAAI,CAAC6C,EAAM,ICGvBzL,EAAAA,GAAAA,CAAAA,EAAAA,CAAAA,CAAAA,gJASL,IAAM4L,EAAsBpI,EACjC,qBACEsH,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAA0BrB,MAC1BoC,EAAAA,UAAAA,MAAAA,CAAAA,EAAAA,SAAAA,CAAAA,EAAAA,CAAAA,KAAAA,EAEMC,EACJD,UAAAA,EACIE,EAAAA,EAA6BA,CAC7BC,EAAAA,EAA0BA,CAE1BrK,EAAW,MAAMmJ,EAAQgB,GAGzBG,EAAY1J,KAAK2I,KAAK,CAFP,MAAMvJ,EAAS0C,IAAI,IAGlC6H,EAA+C,IAAI/I,IAIzD,OAFA8I,EAAUnI,OAAO,CAAC,GAAWoI,EAASjK,GAAG,CAACwJ,EAAMrE,OAAO,CAAEqE,IAElDS,CACT,GAGK,eAAeC,EACpB5F,CAAsB,CACtBa,CAAe,CACfgF,CAAgB,MAYbC,EATH,IAAMC,EAAeJ,CADJ,MAAMN,EAAoBnC,MAAO,QACpB3I,GAAG,CAACsG,GAElC,GAAIkF,EACF,OAAOF,EAAW,IAAME,EAAaC,QAAQ,CAG/C,IAAMF,EAAc,MAAMtE,EAAqBxB,EAAYa,GAE3D,GACE,CAACiF,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAa5J,KAAK,GAAlB4J,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAoBzD,IAAI,GACxByD,EAAY5J,KAAK,CAACmG,IAAI,EAAI,CAAE,YAAYyD,EAAY5J,KAAK,CAACmG,IAAI,EAE/D,MAAM,MAAU,GAAWhI,MAAA,CAARwG,EAAQ,mCAG7B,OAAOgF,EAAW,IAAMC,EAAY5J,KAAK,CAACmG,IAAI,CAAC4D,MAAM,CAACD,QAAQ,CAGzD,eAAeE,EACpBlG,CAAsB,CACtBa,CAAe,CACfgF,CAAgB,EAEhB,GAAM,CAACG,EAAUG,EAAM,CAAG,MAAMvM,QAAQuK,GAAG,CAAC,CAC1CyB,EAAkB5F,EAAYa,EAASgF,GACvCZ,EAASpE,GACV,EAED,OAAOmF,EAAWG,EAAMA,KAAK,CC4N/B,eAAeC,EACbpG,CAAsB,CACtBqG,CAAgF,CAChFC,CAA0B,EAE1B,IAAMC,EAAaF,EAA+BE,UAAU,CAE5D,GAAIA,EAAY,CACd,IAAMC,EAAcF,CAAQ,CAACA,EAAS5L,MAAM,CAAG,EAAE,CAEjD8L,EAAYC,wBAAwB,CAAG,IAAIlL,OAAOC,OAAO,GACzDgL,EAAYE,cAAc,CACxBF,EAAYC,wBAAwB,CACpCD,EAAYG,0BAA0B,CAExC,GAAM,CAAEC,MAAAA,CAAK,CAAEC,MAAAA,CAAK,CAAEC,YAAAA,CAAW,CAAEC,YAAAA,CAAW,CAAE,CAC9CV,EAA+BW,KAAK,CAEhC,CAACC,EAAGC,EAAGC,EAAQC,EAAQC,EAASC,EAAQ,CAAG,MAAM1N,QAAQuK,GAAG,CAAC,CACjE+B,EACElG,EACA4G,EACAjH,OAAO4G,EAAWgB,YAAY,CAACC,YAAY,GAE7CtB,EACElG,EACA6G,EACAlH,OAAO4G,EAAWgB,YAAY,CAACE,YAAY,GAE7CvB,EAAclG,EAAY4G,EAAOjH,OAAO4G,EAAWgB,YAAY,CAACG,IAAI,GACpExB,EAAclG,EAAY6G,EAAOlH,OAAO4G,EAAWgB,YAAY,CAACI,IAAI,GACpE,EAEIzB,EACElG,EACA8G,EACAnH,OAAO4G,EAAWgB,YAAY,CAACK,SAAS,GAJ1C,EAMJ,EAEI1B,EACElG,EACA+G,EACApH,OAAO4G,EAAWgB,YAAY,CAACK,SAAS,GAJ1C,EAML,EAED,MAAO,CACLC,YAAaZ,EAAIC,EACjBY,mBAAoBX,EAASC,EAC7BW,sBAAuBV,EAAUC,CACnC,CACF,CAEA,MAAO,CACLO,YAAa,EACbC,mBAAoB,EACpBC,sBAAuB,CACzB,CACF,CAqDA,eAAeC,EACbhI,CAAsB,CACtBqG,CAAgF,EAEhF,GAAM,CAAEjC,SAAAA,CAAQ,CAAEC,UAAAA,CAAS,CAAE,CAAGgC,EAE1B4B,EAAcC,SA9NpBC,CAA0D,CAC1D/D,CAAkC,CAClCC,CAAmC,EAEnC,IAAM+D,EAAgBhE,EAAS1J,MAAM,CAC/B2N,EACJjE,GAAAA,EAAS1J,MAAM,CACX,EACA0J,EACGrI,GAAG,CAAC,GAAQkG,EAAGqG,kBAAkB,CAAGrG,EAAGsG,kBAAkB,EACzDC,MAAM,CAAC,CAACrL,EAAOsL,IAAYtL,EAAQsL,GACtCC,EAAkBrE,EAAU3J,MAAM,CAClCiO,EACJtE,GAAAA,EAAU3J,MAAM,CACZ,EACA2J,EACGtI,GAAG,CAAC,GAAQkG,EAAGqG,kBAAkB,CAAGrG,EAAGsG,kBAAkB,EACzDC,MAAM,CAAC,CAACrL,EAAOsL,IAAYtL,EAAQsL,GAEtCG,EAAmB,EAAE,CAEN,GAAjBR,GACFQ,EAAOrP,IAAI,CAAC,qBAEM,GAAhB8O,GACFO,EAAOrP,IAAI,CAAC,yBAEVmP,EAAkB,GAAKC,GAAAA,GACzBC,EAAOrP,IAAI,CAAC,0BAEd,IAAMsP,EAA+BlL,KAAKD,GAAG,IACxC0G,EACArI,GAAG,CAAC,GAAa+M,IAAAA,EAAQC,iBAAiB,EAC1C1O,MAAM,CAACgK,EAAUtI,GAAG,CAAC,GAAciN,IAAAA,EAASD,iBAAiB,IAGlE,MAAO,CACLX,cAAAA,EACAC,aAAAA,EACAK,gBAAAA,EACAC,cAAAA,EACAM,iBAAkBd,EAASvF,QAAQ,CAACsG,qBAAqB,CACzDC,oBAAqBhB,EAASvF,QAAQ,CAACwG,wBAAwB,CAC/DP,6BAAAA,EACAD,OAAAA,CACF,CACF,EAiLIvC,EACAjC,EACAC,GAEIiC,EAAW+C,SAlLjBjF,CAAkC,CAClCC,CAAmC,MAwB/BiF,EAtBJ,IAAMC,EAAyCnF,EAC5CrI,GAAG,CAAC,GACI,EACLyN,MAAOvH,EAAGuH,KAAK,CACfC,iBAAkB,UAClBC,aAAczH,IAAAA,EAAG8G,iBAAiB,CAClCY,mBAAoB1H,EAAGqG,kBAAkB,CAAGrG,EAAGsG,kBAAkB,CACnE,GAEDlO,MAAM,CACLgK,EAAUtI,GAAG,CAAC,GACL,EACLyN,MAAOvH,EAAGuH,KAAK,CACfC,iBAAkB,WAClBC,aAAczH,IAAAA,EAAG8G,iBAAiB,CAClCY,mBAAoB,CAAC1H,EAAGqG,kBAAkB,CAAGrG,EAAGsG,kBAAkB,CACpE,IAGHqB,IAAI,CAAC,CAACC,EAAGC,IAAMD,EAAEH,YAAY,CAAGI,EAAEJ,YAAY,EAE3CpD,EAA6B,EAAE,CAGrC,IAAK,IAAIyD,EAAI,EAAGA,EAAIR,EAAe7O,MAAM,CAAEqP,IAAK,CAC9C,IAAIC,EAAYT,CAAc,CAACQ,EAAE,CAC7BE,EAASF,EAAI,EAAIR,EAAe7O,MAAM,CAAG6O,CAAc,CAACQ,EAAI,EAAE,CAAG,KACjEG,EAA6B,CAC/BC,oBAAqBH,EAAUR,KAAK,CACpCY,kBAAmBH,EAASA,EAAOT,KAAK,CAAG,KAC3C7C,2BAA4BqD,EAAUN,YAAY,CAClDjD,yBAA0BwD,EACtBA,EAAOP,YAAY,CACnBM,EAAUN,YAAY,CAC1BhD,eAAgB,EAChB+C,iBAAkBO,EAAUP,gBAAgB,CAC5CE,mBAAoBK,EAAUL,kBAAkB,CAChDU,YAAaf,EACTA,EAAae,WAAW,CAAGL,EAAUL,kBAAkB,CACvDK,EAAUL,kBAAkB,CAGlCO,CAAAA,EAAWxD,cAAc,CACvBwD,EAAWzD,wBAAwB,CACnCyD,EAAWvD,0BAA0B,CACvCL,EAAS/M,IAAI,CAAC2Q,GACdZ,EAAeY,CACjB,CAEA,OAAO5D,CACT,EA6H+BlC,EAAUC,GAEjCiG,EAAe,MAAMlE,EACzBpG,EACAqG,EACAC,GAEIiE,EAAiBC,SApEvBlE,CAA0B,CAC1B2B,CAA+B,CAC/BqC,CAAqC,EAErC,GAAM,CAAE3B,cAAAA,CAAa,CAAEN,aAAAA,CAAY,CAAEY,iBAAAA,CAAgB,CAAEE,oBAAAA,CAAmB,CAAE,CAC1ElB,EACI,CAAEJ,YAAAA,CAAW,CAAEC,mBAAAA,CAAkB,CAAEC,sBAAAA,CAAqB,CAAE,CAC9DuC,EACIG,EACJnE,GAAAA,EAAS5L,MAAM,CACX,EACA4L,EACGvK,GAAG,CAAC,GAAa2O,EAAQL,WAAW,CAAGK,EAAQhE,cAAc,EAC7D8B,MAAM,CAAC,CAACrL,EAAOsL,IAAYtL,EAAQsL,GAEtCkC,EACJrE,GAAAA,EAAS5L,MAAM,CACX,EACA4L,EACGvK,GAAG,CAAC,GAAa2O,EAAQhE,cAAc,EACvC8B,MAAM,CAAC,CAACrL,EAAOsL,IAAYtL,EAAQsL,GAEtCmC,EAAkBD,EAAc,MAChCE,EAAkBJ,EAA2BE,EAC7CG,EAAiBD,EAAkBD,EACnCG,EAAa,IAAQ9B,CAAAA,EAAmBnB,CAAAA,EACxCkD,EAAgB,IAAQ7B,CAAAA,EAAsBpB,CAAAA,EAE9CkD,EAAkBtC,EAAgBd,EAAcQ,EAQtD,MAAO,CACLoC,yBAAAA,EACAE,WAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACAI,gBAAAA,EACAC,aAZAD,EACAhC,EACAE,EACArB,EACAC,EASA+C,eAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAG,aAnBmBL,EAAiBC,EAAaC,CAoBnD,CACF,EAoB2C1E,EAAU2B,EAAaqC,GAEhE,MAAO,CACL,GAAGjE,CAA8B,CACjC,GAAG4B,CAAW,CACd,GAAGqC,CAAY,CACfhE,SAAAA,EACA,GAAGiE,CAAc,CAErB,CAEO,eAAea,EACpBpL,CAAsB,CACtBqD,CAAuB,EAEvB,IAAMkE,EAAe,MAAM/D,EAAgBH,GAE3C,GAAI,CAACkE,EACH,OAGF,IAAM8D,EAAW,MAAMxG,EAAY0C,EAAa3E,QAAQ,CAAC0I,YAAY,EAE/DC,EAAYC,SA5RCH,CAAyB,MAnCtBI,EAAiBC,EAoCvC,GAAM,CAACD,EAASC,EAAQ,CAAGL,EAAS5I,IAAI,CAACkJ,KAAK,CAAC,KAEzClJ,EAAO4I,EAAS5I,IAAI,CACpBmJ,EAAe,GAAcH,MAAAA,CAAXC,EAAQ,KAAWrR,MAAA,CAARoR,GAC7BI,EAAaC,CAxCGL,EAwCYA,EAxCKC,EAwCIA,EAtC3C,CAAI,CAAC,MAAO,OAAQ,OAAO,CAACK,QAAQ,CAACN,IACnC,QAAIA,EAEE,CAAC,OAAQ,OAAO,CAACM,QAAQ,CAACL,GAU9B,CAAC,OAAQ,OAAO,CAACK,QAAQ,CAACN,IAC1B,CAAC,OAAQ,OAAO,CAACM,QAAQ,CAACL,IAGtBD,QAAAA,CARN,GA6BmEhJ,EAAfmJ,EAKtD,MAAO,CACLnJ,KAAAA,EACAoJ,WAAAA,EACAG,SAPe,CAACX,EAASY,MAAM,CAAEZ,EAASa,MAAM,CAAC,CAChDtC,IAAI,CAAC,CAACC,EAAGC,IAAOD,EAAIC,EAAI,EAAI,GAC5B3N,IAAI,CAAC,GAMR,CACF,EA6QgCkP,GACxBrE,EA3QC,CACLJ,MAAOuF,EAASF,MAAM,CACtBpF,MAAOsF,EAASD,MAAM,CACtBpF,YAAaqF,EAASC,aAAa,CACnCrF,YAAaoF,EAASE,aAAa,EAgRrC,OAAOrE,EAAqBhI,EAN1B,CACE,GAAGuH,CAAY,CACfgE,UAAAA,EACAvE,MAAAA,CACF,EAGJ,CAqDA,eAAesF,EACbC,CAAwD,CACxDC,CAAyD,CACzDC,CAAwD,EAExD,IAAMC,EAA8B,EAAE,CAChCC,EAA4B,EAAE,CAEpC,IAAK,IAAI5C,EAAI,EAAGA,EAAIwC,EAAmB7R,MAAM,CAAEqP,IAAK,CAClD,IAAM9H,EAAKsK,CAAkB,CAACxC,EAAE,CAEhC,GAAI9H,EAAI,CACN,IAAMI,EAAOuK,SArCjB3K,CAA6B,EAE7B,GAAI,CA3BGA,EAAG4K,WAAW,CAACC,OAAO,CAACC,YAAY,CACvChR,GAAG,CAAC,GACIiR,EAAYjL,SAAS,CAACe,QAAQ,IAAMd,EAAAA,EAAkBA,EAE9DwG,MAAM,CAAC,CAACrL,EAAOsL,IAAYtL,GAASsL,GAwBrC,OAGF,IAAMwE,EAAUhL,EAAG4K,WAAW,CAACC,OAAO,CAACC,YAAY,CAChDhR,GAAG,CAAC,IAGH,GAAKiR,EAAY5K,QAAQ,CAIzB,OAAO8K,SAhCQF,CAAwC,EAI3D,GAAIA,IAAAA,EAAY5K,QAAQ,CAAC1H,MAAM,CAC7B,MAAO,CAAE2I,gBAAiBlC,KAAAA,EAAWgM,SAAU,EAAM,EAGvD,IAAM/K,EAAW4K,EAAY5K,QAAQ,CAACrG,GAAG,CAAC,GAAayG,EAAQM,QAAQ,WAEvE,CAAY,CAAC,EAAE,EAAIV,CAAQ,CAAC,EAAE,CACrB,CAAEiB,gBAAiBjB,CAAQ,CAAC,EAAE,CAAE+K,SAAU,EAAM,EAGlD,CAAE9J,gBAAiBjB,CAAQ,CAAC,EAAE,CAAE+K,SAAU,EAAK,CACxD,EAW0BpD,EAOtB,GACCxH,MAAM,CAAC,GAAUF,MAAAA,EAAAA,KAAAA,EAAAA,EAAMgB,eAAe,EAEzC,GAAI4J,GAAAA,EAAQvS,MAAM,CAIlB,OAAOuS,CAAO,CAAC,EAAE,EAeuChL,GAGpD,GAAII,EAAM,CACR,IAAM+K,EAAa/K,EAAKgB,eAAe,EAElCqJ,EAAkBX,QAAQ,CAACqB,KAC9BV,EAAkBnT,IAAI,CAAC6T,GACnBZ,GACFA,EAAuBY,IAIvB/K,EAAK8K,QAAQ,EAAI,CAACR,EAAgBZ,QAAQ,CAACqB,KAC7CT,EAAgBpT,IAAI,CAAC6T,GACjBX,GACFA,EAAsBW,GAG5B,CACF,CACF,CAEA,OAAOV,CACT,CAEO,eAAeW,EACpBrN,CAAsB,CACtBsN,CAA0B,CAC1BC,CAWC,EAED,IAAMtM,EAAgB,EAAE,CAClBuM,EAAiC,EAAE,CACnCC,EAAoC,EAAE,CACtCC,EAAsC,EAAE,CAC1CC,EAAiB,EACjBC,EAAoB,EACpBC,EAAoB,EACpBC,EAAqB,GAEzB,GAAIR,IAAAA,EAAmB5S,MAAM,EAAU4S,IAAAA,EAAmB5S,MAAM,CAC9D,MAAMkG,EACJZ,EACAsN,EACA,MAAOjM,GAAe0M,EAAmB1M,GACzC,KACEyM,EAAqB,GACjBP,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAWS,oBAAoB,GACjCT,EAAUS,oBAAoB,GAEhCC,GACF,OAEG,CACL,IAAMC,EACJ,MAAMzM,EAAkCzB,EAAYsN,EAEtD,OAAM1T,QAAQuK,GAAG,CACf+J,EAA+BnS,GAAG,CAAC,IACjC6E,EACEZ,EACAqD,EACA,MAAOhC,GAAe0M,EAAmB1M,GAE7C,IAEFyM,EAAqB,GACjBP,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAWS,oBAAoB,GACjCT,EAAUS,oBAAoB,GAEhCC,GACF,CAEA,SAASF,EAAmB1M,CAAoC,EAC9D,IAAM8M,EAAkB9M,EAAWkB,MAAM,CACvC,GAAerB,MAAAA,EAAU/G,GAAG,EAG9B,GAAIgU,EAAgBzT,MAAM,CAAG,EAAG,CAC9B,IAAMsG,EAAgBmN,EAAgBpS,GAAG,CACvC,GAAemF,EAAUA,SAAS,EAGpCD,EAAc1H,IAAI,IAAIyH,GAEtB2M,GAAkBQ,EAAgBzT,MAAM,CAEpC6S,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAWzM,iBAAiB,GAC9ByM,EAAUzM,iBAAiB,CAAC6M,GAG9BS,EAAuBpN,EACzB,CACF,CAEA,eAAeoN,EAAuB/M,CAAoB,EAMxDiL,EAL2B,MAAMlL,EAC/BpB,EACAqB,GAKA,IACOmM,EAAqBzB,QAAQ,CAAC1I,KACjCmK,EAAqBjU,IAAI,CAAC8J,GACtBkK,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAWc,eAAe,GAC5Bd,EAAUc,eAAe,CAAChL,GAE5BiL,EAAmBjL,GAEvB,EACA,IACOoK,EAAwB1B,QAAQ,CAAC1I,IACpCoK,EAAwBlU,IAAI,CAAC8J,EAEjC,GAEFuK,GAAqBvM,EAAW3G,MAAM,CACtCuT,GACF,CAEA,eAAeK,EAAmBjL,CAAuB,EACvD,IAAMkL,EAAS,MAAMnD,EAAkBpL,EAAYqD,EAEnDwK,CAAAA,IACIU,IACEhB,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAWiB,gBAAgB,GAC7BjB,EAAUiB,gBAAgB,CAACX,EAAmBU,GAEhDb,EAAWnU,IAAI,CAACgV,IAElBN,GACF,CAEA,SAASA,IAELH,GACAF,GAAqB3M,EAAcvG,MAAM,EACzC6S,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAWkB,mBAAmB,GAE9BlB,EAAUkB,mBAAmB,GAG7BX,GACAF,GAAqB3M,EAAcvG,MAAM,EACzCmT,GAAqBL,EAAqB9S,MAAM,GAGhDgT,EAAWnQ,OAAO,CAAC,IACjBgR,EAAOG,SAAS,CAAGjB,EAAwB1B,QAAQ,CACjDwC,EAAO3L,QAAQ,CAAC/B,OAAO,EAErB0N,EAAOG,SAAS,EAAIH,GAAAA,EAAO7F,eAAe,EAC5C6F,EAAO3F,MAAM,CAACrP,IAAI,CAAC,oCAEvB,GAEIgU,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAWxM,MAAM,GACnBwM,EAAUxM,MAAM,GAGtB,CAEA,OAAO2M,CACT,CAiKO,SAASiB,EAEdC,CAAY,MAAEC,EAAAA,CAAAA,CAAAA,UAAAA,MAAAA,CAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,EAAAA,SAAAA,CAAAA,EAAAA,CACd,OAAOD,EAAQhF,IAAI,CAAC,CAACC,EAAGC,IACtB+E,EACI/E,EAAEoB,YAAY,CAAGrB,EAAEqB,YAAY,CAC/BrB,EAAEqB,YAAY,CAAGpB,EAAEoB,YAAY,CAEvC,CAEO,SAAS4D,EACdF,CAAgC,EAEhC,IAAMG,EAAuC,IAAInS,IAejD,OAbAgS,EAAQrR,OAAO,CAAC,IACd,IAAMyR,EAAUT,EAAOhD,SAAS,CAACS,QAAQ,CACnCiD,EAAYF,EAAgBxU,GAAG,CAACyU,GAEjCC,EAGCV,EAAO1F,4BAA4B,CAAGoG,GACxCF,EAAgBrT,GAAG,CAACsT,EAAST,EAAO1F,4BAA4B,EAHlEkG,EAAgBrT,GAAG,CAACsT,EAAST,EAAO1F,4BAA4B,CAMpE,GAEO+F,EAAQhF,IAAI,CACjB,CAACC,EAAGC,IACFiF,EAAgBxU,GAAG,CAACuP,EAAEyB,SAAS,CAACS,QAAQ,EACtC+C,EAAgBxU,GAAG,CAACsP,EAAE0B,SAAS,CAACS,QAAQ,GAC1ClC,EAAEjB,4BAA4B,CAAGgB,EAAEhB,4BAA4B,CAErE,qECl3BA,SAASqG,GACPC,CAA0C,CAC1CC,CAA4B,EAE5B,MAAOD,SAAAA,EAAW1M,IAAI,CAACoJ,UAAU,CAC7B,GACA,EAEEuD,SAAAA,EACE,yDACA,yDAHF,2CAIR,CAEO,IAAMC,GAAmB,IAG9B,GAAM,CAACC,EAAgBC,EAAkB,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,CACnDC,OAAQ,eACRC,UAAW,YACb,GAEA,GAAIC,GAAAA,EAAMC,oBAAoB,CAACC,UAAU,CAACC,WAAW,CAACpV,MAAM,CAC1D,MAAO,GAAAqV,EAAAC,GAAA,EAAAD,EAAAE,QAAA,KAGT,IAAMC,EAAY,CAChBzN,KAAM,CACJoJ,WAAY,QACZG,SAAU,OACZ,EACAmE,WAAYR,EAAMC,oBAAoB,CAACC,UAAU,CAACM,UAAU,CAC5DC,eAAgBT,EAAMC,oBAAoB,CAACC,UAAU,CAACO,cAAc,CACpE/H,aAAcsH,EAAMC,oBAAoB,CAACC,UAAU,CAACxH,YAAY,CAChEM,cAAegH,EAAMC,oBAAoB,CAACC,UAAU,CAAClH,aAAa,CAClEM,iBAAkB0G,EAAMC,oBAAoB,CAACC,UAAU,CAAC5G,gBAAgB,CACxEE,oBACEwG,EAAMC,oBAAoB,CAACC,UAAU,CAAC1G,mBAAmB,CAC3D0B,gBACE8E,EAAMC,oBAAoB,CAACC,UAAU,CAACpF,wBAAwB,CAC9DkF,EAAMC,oBAAoB,CAACC,UAAU,CAAClF,UAAU,CAClDO,aAAcyE,EAAMC,oBAAoB,CAACC,UAAU,CAAC3E,YAAY,EAyDlE,MACE,GAAA6E,EAAAC,GAAA,EAACK,MAAAA,CAAIC,UAAU,4BACb,GAAAP,EAAAQ,IAAA,EAACC,EAAAA,CAAKA,CAAAA,CACJlB,eAAgBA,EAChBmB,aAAc,GAAgBlB,EAAkBmB,aAEhD,GAAAX,EAAAQ,IAAA,EAACI,EAAAA,CAAWA,CAAAA,WACV,GAAAZ,EAAAC,GAAA,EAACY,GAAAA,CAAWA,CAAAA,CAAYC,cAAa,YAAC,QAArB,QAGjB,GAAAd,EAAAQ,IAAA,EAACK,GAAAA,CAAWA,CAAAA,CAAkBC,cAAa,aAAC,QACrC,GAAAd,EAAAC,GAAA,EAACc,KAAAA,CAAAA,GAAK,YADI,cAIjB,GAAAf,EAAAQ,IAAA,EAACK,GAAAA,CAAWA,CAAAA,CAAsBC,cAAa,aAAC,QACzC,GAAAd,EAAAC,GAAA,EAACc,KAAAA,CAAAA,GAAK,cADI,kBAIjB,GAAAf,EAAAQ,IAAA,EAACK,GAAAA,CAAWA,CAAAA,CAAoBC,cAAa,aAAC,UACrC,GAAAd,EAAAC,GAAA,EAACc,KAAAA,CAAAA,GAAK,YADE,gBAIjB,GAAAf,EAAAQ,IAAA,EAACK,GAAAA,CAAWA,CAAAA,CAAoBC,cAAa,aAAC,SACtC,GAAAd,EAAAC,GAAA,EAACc,KAAAA,CAAAA,GAAK,aADG,gBAIjB,GAAAf,EAAAQ,IAAA,EAACK,GAAAA,CAAWA,CAAAA,CAAqBC,cAAa,aAAC,SACvC,GAAAd,EAAAC,GAAA,EAACc,KAAAA,CAAAA,GAAK,gBADG,iBAIjB,GAAAf,EAAAQ,IAAA,EAACK,GAAAA,CAAWA,CAAAA,CAAoBC,cAAa,aAAC,SACtC,GAAAd,EAAAC,GAAA,EAACc,KAAAA,CAAAA,GAAK,WADG,gBAIjB,GAAAf,EAAAQ,IAAA,EAACK,GAAAA,CAAWA,CAAAA,CAAuBC,cAAa,aAAC,WACvC,GAAAd,EAAAC,GAAA,EAACc,KAAAA,CAAAA,GAAK,YADC,mBAIjB,GAAAf,EAAAQ,IAAA,EAACK,GAAAA,CAAWA,CAAAA,CAAkCC,cAAa,aAAC,mBAC1C,GAAAd,EAAAC,GAAA,EAACc,KAAAA,CAAAA,GAAK,aADP,8BAIjB,GAAAf,EAAAQ,IAAA,EAACK,GAAAA,CAAWA,CAAAA,CAA+BC,cAAa,aAAC,YAC9C,GAAAd,EAAAC,GAAA,EAACc,KAAAA,CAAAA,GAAK,aADA,8BAKnB,GAAAf,EAAAC,GAAA,EAACe,GAAAA,CAASA,CAAAA,CAACC,MAAO,IApGTrB,EAAMC,oBAAoB,CAACC,UAAU,CAACC,WAAW,CAAClG,IAAI,CACjE,CAACC,EAAGC,KACF,OAAQwF,EAAeG,MAAM,EAC3B,IAAK,eACH,MAAOH,cAAAA,EAAeI,SAAS,CAC3B5F,EAAEb,gBAAgB,CAChBa,EAAEX,mBAAmB,CACrBU,EAAEZ,gBAAgB,CAClBY,EAAEV,mBAAmB,CACvBU,EAAEZ,gBAAgB,CAChBY,EAAEV,mBAAmB,CACrBW,EAAEb,gBAAgB,CAClBa,EAAEX,mBAAmB,KAExB,6BACH,IAAM8H,EAAYpH,EAAEqB,YAAY,CAAGrB,EAAEgB,eAAe,CAC9CqG,EAAYpH,EAAEoB,YAAY,CAAGpB,EAAEe,eAAe,CAEpD,MAAOyE,cAAAA,EAAeI,SAAS,CAC3BwB,EAAYD,EACZA,EAAYC,CAElB,KAAK,0BACH,IAAMC,EAAatH,EAAEqB,YAAY,CAAGrB,EAAExB,YAAY,CAC5C+I,EAAatH,EAAEoB,YAAY,CAAGpB,EAAEzB,YAAY,CAElD,MAAOiH,cAAAA,EAAeI,SAAS,CAC3B0B,EAAaD,EACbA,EAAaC,CAEnB,KAAK,iBACL,IAAK,eACL,IAAK,kBACL,IAAK,eACL,IAAK,gBACH,MAAO9B,cAAAA,EAAeI,SAAS,CAC3B5F,CAAC,CAACwF,EAAeG,MAAM,CAAC,CAAG5F,CAAC,CAACyF,EAAeG,MAAM,CAAC,CACnD5F,CAAC,CAACyF,EAAeG,MAAM,CAAC,CAAG3F,CAAC,CAACwF,EAAeG,MAAM,CAAC,KAEpD,OACH,MAAOH,aAAAA,EAAeI,SAAS,CAC3B7F,EAAEpH,IAAI,CAACoJ,UAAU,CAACwF,aAAa,CAACvH,EAAErH,IAAI,CAACoJ,UAAU,EACjD/B,EAAErH,IAAI,CAACoJ,UAAU,CAACwF,aAAa,CAACxH,EAAEpH,IAAI,CAACoJ,UAAU,CAEvD,SACE,OAAO,CACX,CACF,GAqDoDqE,EAAU,UACzD,GACC,GAAAH,EAAAQ,IAAA,EAACe,GAAAA,CAAQA,CAAAA,WACP,GAAAvB,EAAAC,GAAA,EAACuB,GAAAA,CAASA,CAAAA,CAACjB,UAAWpB,GAAesC,EAAW,kBAC7CA,EAAU/O,IAAI,CAACoJ,UAAU,GAE5B,GAAAkE,EAAAC,GAAA,EAACuB,GAAAA,CAASA,CAAAA,CAACjB,UAAWpB,GAAesC,YAClCA,EAAUrB,UAAU,CAACsB,cAAc,CAAC,WAEvC,GAAA1B,EAAAC,GAAA,EAACuB,GAAAA,CAASA,CAAAA,CAACjB,UAAWpB,GAAesC,YAClCA,EAAUpB,cAAc,CAACqB,cAAc,CAAC,WAE3C,GAAA1B,EAAAC,GAAA,EAACuB,GAAAA,CAASA,CAAAA,CAACjB,UAAWpB,GAAesC,YAClC,CACCA,EAAUvI,gBAAgB,CAAGuI,EAAUrI,mBAAmB,EAC1DsI,cAAc,CAAC,QAAS,CACxBrT,MAAO,WACPsT,SAAU,MACVC,sBAAuB,EACvBC,sBAAuB,CACzB,KAEF,GAAA7B,EAAAC,GAAA,EAACuB,GAAAA,CAASA,CAAAA,CAACjB,UAAWpB,GAAesC,YAClCA,EAAUnJ,YAAY,CAACoJ,cAAc,CAAC,QAAS,CAC9CrT,MAAO,WACPsT,SAAU,MACVC,sBAAuB,EACvBC,sBAAuB,CACzB,KAEF,GAAA7B,EAAAC,GAAA,EAACuB,GAAAA,CAASA,CAAAA,CAACjB,UAAWpB,GAAesC,YAClCA,EAAU7I,aAAa,CAAC8I,cAAc,CAAC,QAAS,CAC/CrT,MAAO,WACPsT,SAAU,MACVC,sBAAuB,EACvBC,sBAAuB,CACzB,KAEF,GAAA7B,EAAAC,GAAA,EAACuB,GAAAA,CAASA,CAAAA,CAACjB,UAAWpB,GAAesC,YAClCA,EAAUtG,YAAY,CAACuG,cAAc,CAAC,QAAS,CAC9CrT,MAAO,WACPsT,SAAU,MACVC,sBAAuB,EACvBC,sBAAuB,CACzB,KAEF,GAAA7B,EAAAC,GAAA,EAACuB,GAAAA,CAASA,CAAAA,CAACjB,UAAWpB,GAAesC,YAClCA,EAAU3G,eAAe,CAAC4G,cAAc,CAAC,QAAS,CACjDrT,MAAO,WACPsT,SAAU,MACVC,sBAAuB,EACvBC,sBAAuB,CACzB,KAEF,GAAA7B,EAAAC,GAAA,EAACuB,GAAAA,CAASA,CAAAA,CAACjB,UAAWpB,GAAesC,YAClC,CACCA,EAAUtG,YAAY,CAAGsG,EAAU3G,eAAe,EAClD4G,cAAc,CAAC,QAAS,CACxBrT,MAAO,UACPuT,sBAAuB,EACvBC,sBAAuB,CACzB,KAEF,GAAA7B,EAAAC,GAAA,EAACuB,GAAAA,CAASA,CAAAA,CAACjB,UAAWpB,GAAesC,EAAW,iBAC7C,CACCA,EAAUtG,YAAY,CAAGsG,EAAUnJ,YAAY,EAC/CoJ,cAAc,CAAC,QAAS,CACxBrT,MAAO,UACPuT,sBAAuB,EACvBC,sBAAuB,CACzB,OApEWJ,EAAU/O,IAAI,CAACuJ,QAAQ,QA4ElD,kDCzPO,IAAM6F,GAAc,GAMvB,GAAA9B,EAAAQ,IAAA,EAACF,MAAAA,CAAIC,UAAU,kCACb,GAAAP,EAAAQ,IAAA,EAACF,MAAAA,CAAIC,UAAU,wBACZX,EAAMmC,OAAO,CACZ,GAAA/B,EAAAC,GAAA,EAAC+B,GAAAA,CAAOA,CAAAA,CAACC,KAAK,OACZrC,CAAkB,IAAlBA,EAAMmC,OAAO,CACf,IAEA,GACA,OAEF,GAAA/B,EAAAQ,IAAA,EAACzG,IAAAA,WAAG6F,EAAMsC,KAAK,CAAC,eAElB,GAAAlC,EAAAC,GAAA,EAACK,MAAAA,CAAIC,UAAU,mBACZ,iBAAOX,EAAMzT,KAAK,CACfyT,EAAMzT,KAAK,CAACuV,cAAc,CAAC,QAAS,CAClCE,sBAAuB,EACvBC,sBAAuB,CACzB,GACAjC,EAAMzT,KAAK,gCCnBhB,IAAMgW,GAAoC,IAI/C,GAAIvC,GAAAA,EAAMf,OAAO,CAAClU,MAAM,CACtB,MAAO,GAAAqV,EAAAC,GAAA,EAAAD,EAAAE,QAAA,KAGT,IAAMkC,EAA8BxC,EAAMf,OAAO,CAAC7S,GAAG,CACnD,GAAc6G,EAASA,QAAQ,CAAC/B,OAAO,EAEnCuR,EAAsBzC,EAAMjD,iBAAiB,CAACnK,MAAM,CACxD,GAAqB,CAAC4P,EAA4BpG,QAAQ,CAAC1I,IAG7D,GAAI+O,GAAAA,EAAoB1X,MAAM,CAC5B,MAAO,GAAAqV,EAAAC,GAAA,EAAAD,EAAAE,QAAA,KAGT,IAAMoC,EAAU,KACdzU,EACE,2BACA,UAAYwU,EAAoBjW,IAAI,CAAC,MAEzC,EAEA,MACE,GAAA4T,EAAAC,GAAA,EAACsC,GAAAA,CAAMA,CAAAA,CACLC,aAAW,gCACXjC,UAAU,MACVkC,MAAM,UACNC,aAAc,GAAA1C,EAAAC,GAAA,EAAC0C,GAAAA,EAAYA,CAAAA,CAAAA,GAC3BL,QAAS,IAAMA,aAChB,iCAIL,EClCaM,GAA6B,IAGxC,GAAIhD,GAAAA,EAAMf,OAAO,CAAClU,MAAM,CACtB,MAAO,GAAAqV,EAAAC,GAAA,EAAAD,EAAAE,QAAA,KAGT,IAAMoC,EAAU,KAqFd3T,EAAsB,gCAnFHkU,EADwCjD,EAAMf,OAAO,EAErE7S,GAAG,CAAC,IACH,GAAM,CACJ6G,SAAAA,CAAQ,CACR2I,UAAAA,CAAS,CACTnH,SAAAA,CAAQ,CACRC,UAAAA,CAAS,CACTgE,aAAAA,CAAY,CACZM,cAAAA,CAAa,CACbkC,gBAAAA,CAAe,CACf5B,iBAAAA,CAAgB,CAChBE,oBAAAA,CAAmB,CACnByB,gBAAAA,CAAe,CACfG,WAAAA,CAAU,CACVC,cAAAA,CAAa,CACbF,eAAAA,CAAc,CACdG,gBAAAA,CAAe,CACfC,aAAAA,CAAY,CACZtC,OAAAA,CAAM,CACN+B,WAAAA,CAAU,CACVF,yBAAAA,CAAwB,CACzB,CAAG8D,EAEEsE,EACJzO,GAAAA,EAAS1J,MAAM,CACX,KACA0J,EAASwF,IAAI,CACX,CAACC,EAAGC,IAAMD,EAAEd,iBAAiB,CAAGe,EAAEf,iBAAiB,CACpD,CAAC,EAAE,CAEJ+J,EACJzO,GAAAA,EAAU3J,MAAM,CACZ,KACA2J,EAAUuF,IAAI,CACZ,CAACC,EAAGC,IAAMD,EAAEd,iBAAiB,CAAGe,EAAEf,iBAAiB,CACpD,CAAC,EAAE,CAEV,MAAO,CACLgK,iBAAkBnQ,EAAS/B,OAAO,CAClCyK,aAAc1I,EAAS0I,YAAY,CACnCC,UAAWA,EAAU9I,IAAI,CACzBuQ,WAAYzH,EAAUM,UAAU,CAChCjD,OAAQA,EAAOzM,IAAI,CAAC,OACpB8W,oBAAqBJ,EAAeA,EAAarJ,KAAK,CAAG,KACzD0J,gCAAiCL,EAC7BA,EAAa9J,iBAAiB,CAC7B,KACLoK,oBAAqBL,EAAeA,EAAatJ,KAAK,CAAG,KACzD4J,gCAAiCN,EAC7BA,EAAa/J,iBAAiB,CAC7B,KACLV,aAAAA,EACAM,cAAAA,EACAkC,gBAAAA,EACA5B,iBAAAA,EACAE,oBAAAA,EACAyB,gBAAAA,EACAG,WAAAA,EACAC,cAAAA,EACAF,eAAAA,EACAG,gBAAAA,EACAC,aAAAA,EACAP,WAAAA,EACAF,yBAAAA,CACF,CACF,GACC1O,GAAG,CAAC,IACHsG,EAAK6Q,+BAA+B,CAClC7Q,MAAAA,EAAK6Q,+BAA+B,CAChC,KACA,IAAI3X,KACFoE,IAAAA,OAAO0C,EAAK6Q,+BAA+B,GAC3CG,WAAW,GACnBhR,EAAK+Q,+BAA+B,CAClC/Q,MAAAA,EAAK+Q,+BAA+B,CAChC,KACA,IAAI7X,KACFoE,IAAAA,OAAO0C,EAAK+Q,+BAA+B,GAC3CC,WAAW,GAEZhR,IAIb,EAEA,MACE,GAAA0N,EAAAC,GAAA,EAACsC,GAAAA,CAAMA,CAAAA,CACLC,aAAW,yBACXjC,UAAU,MACVkC,MAAM,UACNC,aAAc,GAAA1C,EAAAC,GAAA,EAAC0C,GAAAA,EAAYA,CAAAA,CAAAA,GAC3BL,QAAS,IAAMA,aAChB,0BAIL,EC1GaiB,GAA+B,IAG1C,IAAMC,EAAkB5D,EAAMf,OAAO,CAACrM,MAAM,CAC1C,GAAYgM,GAAAA,EAAO3F,MAAM,CAAClO,MAAM,EAGlC,GACE6Y,GAAAA,EAAgB7Y,MAAM,EACtB6Y,EAAgB7Y,MAAM,EAAIiV,EAAMf,OAAO,CAAClU,MAAM,CAE9C,MAAO,GAAAqV,EAAAC,GAAA,EAAAD,EAAAE,QAAA,KAGT,IAAMoC,EAAU,KAqFd3T,EAAsB,kCAnFHkU,EADuCW,GAEvDxX,GAAG,CAAC,IACH,GAAM,CACJ6G,SAAAA,CAAQ,CACR2I,UAAAA,CAAS,CACTnH,SAAAA,CAAQ,CACRC,UAAAA,CAAS,CACTgE,aAAAA,CAAY,CACZM,cAAAA,CAAa,CACbkC,gBAAAA,CAAe,CACf5B,iBAAAA,CAAgB,CAChBE,oBAAAA,CAAmB,CACnByB,gBAAAA,CAAe,CACfG,WAAAA,CAAU,CACVC,cAAAA,CAAa,CACbF,eAAAA,CAAc,CACdG,gBAAAA,CAAe,CACfC,aAAAA,CAAY,CACZtC,OAAAA,CAAM,CACN+B,WAAAA,CAAU,CACVF,yBAAAA,CAAwB,CACzB,CAAG8D,EAEEsE,EACJzO,GAAAA,EAAS1J,MAAM,CACX,KACA0J,EAASwF,IAAI,CACX,CAACC,EAAGC,IAAMD,EAAEd,iBAAiB,CAAGe,EAAEf,iBAAiB,CACpD,CAAC,EAAE,CAEJ+J,EACJzO,GAAAA,EAAU3J,MAAM,CACZ,KACA2J,EAAUuF,IAAI,CACZ,CAACC,EAAGC,IAAMD,EAAEd,iBAAiB,CAAGe,EAAEf,iBAAiB,CACpD,CAAC,EAAE,CAEV,MAAO,CACLgK,iBAAkBnQ,EAAS/B,OAAO,CAClCyK,aAAc1I,EAAS0I,YAAY,CACnCC,UAAWA,EAAU9I,IAAI,CACzBuQ,WAAYzH,EAAUM,UAAU,CAChCjD,OAAQA,EAAOzM,IAAI,CAAC,OACpB8W,oBAAqBJ,EAAeA,EAAarJ,KAAK,CAAG,KACzD0J,gCAAiCL,EAC7BA,EAAa9J,iBAAiB,CAC7B,KACLoK,oBAAqBL,EAAeA,EAAatJ,KAAK,CAAG,KACzD4J,gCAAiCN,EAC7BA,EAAa/J,iBAAiB,CAC7B,KACLV,aAAAA,EACAM,cAAAA,EACAkC,gBAAAA,EACA5B,iBAAAA,EACAE,oBAAAA,EACAyB,gBAAAA,EACAG,WAAAA,EACAC,cAAAA,EACAF,eAAAA,EACAG,gBAAAA,EACAC,aAAAA,EACAP,WAAAA,EACAF,yBAAAA,CACF,CACF,GACC1O,GAAG,CAAC,IACHsG,EAAK6Q,+BAA+B,CAClC7Q,MAAAA,EAAK6Q,+BAA+B,CAChC,KACA,IAAI3X,KACFoE,IAAAA,OAAO0C,EAAK6Q,+BAA+B,GAC3CG,WAAW,GACnBhR,EAAK+Q,+BAA+B,CAClC/Q,MAAAA,EAAK+Q,+BAA+B,CAChC,KACA,IAAI7X,KACFoE,IAAAA,OAAO0C,EAAK+Q,+BAA+B,GAC3CC,WAAW,GAEZhR,IAIb,EAEA,MACE,GAAA0N,EAAAC,GAAA,EAACsC,GAAAA,CAAMA,CAAAA,CACLC,aAAW,2BACXjC,UAAU,MACVkC,MAAM,UACNC,aAAc,GAAA1C,EAAAC,GAAA,EAAC0C,GAAAA,EAAYA,CAAAA,CAAAA,GAC3BL,QAAS,IAAMA,aAChB,4BAIL,EClHamB,GAAiB,GAK1B,GAAAzD,EAAAQ,IAAA,EAACF,MAAAA,CAAIC,UAAU,wBACb,GAAAP,EAAAC,GAAA,EAACyD,GAAAA,CAAIA,CAAAA,CAACnD,UAAU,2BACd,GAAAP,EAAAQ,IAAA,EAACmD,GAAAA,CAAQA,CAAAA,WACP,GAAA3D,EAAAC,GAAA,EAAC6B,GAAWA,CACVI,MAAM,eACN/V,MAAOyT,EAAMC,oBAAoB,CAAC+D,cAAc,GAEjDhE,EAAMmC,OAAO,EACdnC,EAAMC,oBAAoB,CAACgE,GAAG,EAC9BjE,IAAAA,EAAMC,oBAAoB,CAACgE,GAAG,CAC5B,GAAA7D,EAAAC,GAAA,EAAC6B,GAAWA,CACVI,MAAM,6BACN/V,MAAOyT,EAAMC,oBAAoB,CAACgE,GAAG,GAGvC,GAEF,GAAA7D,EAAAC,GAAA,EAAC6B,GAAWA,CACVC,QAAS,CAACnC,EAAMC,oBAAoB,CAAC9B,kBAAkB,CACvDmE,MAAM,0BACN/V,MAAOyT,EAAMC,oBAAoB,CAACjC,cAAc,GAElD,GAAAoC,EAAAC,GAAA,EAAC6B,GAAWA,CACVC,QAAS,CAACnC,EAAMC,oBAAoB,CAACiE,iBAAiB,CACtD5B,MAAM,uBACN/V,MAAOyT,EAAMC,oBAAoB,CAAClD,iBAAiB,CAAChS,MAAM,GAE5D,GAAAqV,EAAAC,GAAA,EAAC6B,GAAWA,CACVC,QAASnC,EAAMmC,OAAO,CACtBG,MAAM,2BACN/V,MACEyT,EAAMC,oBAAoB,CAAChB,OAAO,CAACrM,MAAM,CACvC,GAAYgM,EAAO3F,MAAM,CAAClO,MAAM,CAAG,GACnCA,MAAM,GAGZ,GAAAqV,EAAAC,GAAA,EAAC6B,GAAWA,CACVC,QAASnC,EAAMmC,OAAO,CACtBG,MAAM,0BACN/V,MAAOyT,EAAMC,oBAAoB,CAAChB,OAAO,CAAClU,MAAM,GAEjD,EAAOkV,oBAAoB,CAACkE,IAAI,CAQ/B,GAAA/D,EAAAC,GAAA,EAAAD,EAAAE,QAAA,KAPA,GAAAF,EAAAC,GAAA,EAAC+D,GAAAA,CAAQA,CAAAA,CACPzD,UAAU,OACV0D,gBAAiB,CAACrE,EAAMC,oBAAoB,CAACiE,iBAAiB,CAC9DI,eAAgBtE,EAAMC,oBAAoB,CAACiE,iBAAiB,CAC5D3X,MAAOyT,EAAMC,oBAAoB,CAACsE,gBAAgB,QAO1D,GAAAnE,EAAAQ,IAAA,EAACF,MAAAA,CAAIC,UAAU,8CACb,GAAAP,EAAAC,GAAA,EAACkC,GAAiCA,CAChCxF,kBAAmBiD,EAAMC,oBAAoB,CAAClD,iBAAiB,CAC/DkC,QAASe,EAAMC,oBAAoB,CAAChB,OAAO,GAE7C,GAAAmB,EAAAC,GAAA,EAACsD,GAA4BA,CAC3B1E,QAASe,EAAMC,oBAAoB,CAAChB,OAAO,GAE7C,GAAAmB,EAAAC,GAAA,EAAC2C,GAA0BA,CACzB/D,QAASe,EAAMC,oBAAoB,CAAChB,OAAO,SCvExCuF,GAAgB,GAI3B,GAAIxE,EAAMC,oBAAoB,CAACwE,SAAS,CAC/B,GAAArE,EAAAC,GAAA,EAAAD,EAAAE,QAAA,KAIP,GAAAF,EAAAQ,IAAA,EAACF,MAAAA,WACC,GAAAN,EAAAC,GAAA,EAACK,MAAAA,CAAIC,UAAU,kBACb,GAAAP,EAAAC,GAAA,EAACwD,GAAcA,CACb1B,QAASnC,EAAMmC,OAAO,CACtBlC,qBAAsBD,EAAMC,oBAAoB,KAGpD,GAAAG,EAAAC,GAAA,EAACK,MAAAA,CAAIC,UAAU,kBACb,GAAAP,EAAAC,GAAA,EAACX,GAAgBA,CAACO,qBAAsBD,EAAMC,oBAAoB,sBCjBnE,IAAMyE,GAAa,GAMxB,EAAUvC,OAAO,CACR,GAAA/B,EAAAC,GAAA,EAAAD,EAAAE,QAAA,KAIP,GAAAF,EAAAC,GAAA,EAACK,MAAAA,CAAIC,UAAU,qCACb,GAAAP,EAAAQ,IAAA,EAACF,MAAAA,CAAIC,UAAU,oEACb,GAAAP,EAAAC,GAAA,EAACsE,GAAAA,CAAKA,CAAAA,CACJC,SAAU5E,EAAMmC,OAAO,CACvB0C,MAAM,0CACNC,KAAK,OACLC,SAAU,GAAW/E,EAAM+E,QAAQ,CAACC,KAEtC,GAAA5E,EAAAC,GAAA,EAACsC,GAAAA,CAAMA,CAAAA,CACLC,aAAW,KACXC,MAAM,UACN+B,SAAU5E,EAAMmC,OAAO,EAAI,CAACnC,EAAMiF,QAAQ,CAAC5U,UAAU,CACrDqS,QAAS1C,EAAMkF,gBAAgB,UAChC,YCSM,SAASC,KA4BtB,IAAMC,EAAqC,CACzCX,UAAW,EACXT,eAAgB,GAChBhG,eAAgB,EAChBG,mBAAoB,GACpB+F,kBAAmB,GACnBmB,kBAAmB,EACnBpG,QAAS,EAAE,CACXiB,WAnC2C,CAC3CC,YAAa,EAAE,CACfmF,iBAAkB,EAClB9E,WAAY,EACZC,eAAgB,EAChBhI,cAAe,EACfC,aAAc,EACdK,gBAAiB,EACjBC,cAAe,EACfM,iBAAkB,EAClBE,oBAAqB,EACrBN,6BAA8B,EAC9BhB,YAAa,EACbC,mBAAoB,EACpBC,sBAAuB,EACvB0C,yBAA0B,EAC1BE,WAAY,EACZC,gBAAiB,EACjBC,gBAAiB,EACjBI,gBAAiB,EACjBC,aAAc,EACdH,WAAY,EACZC,cAAe,EACfF,eAAgB,EAChBK,aAAc,CAChB,EAWE+J,YAAa,EAAE,CACfhB,iBAAkB,GAClBN,IAAK,GACLlH,kBAAmB,EAAE,CACrBe,wBAAyB,EAAE,CAC3BqG,KAAM,EACR,EAEMc,EAAWO,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,EAAAA,QAAQA,EAC9B,CAACC,EAAeC,EAAiB,CAAG9F,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAC7C,CAACsC,EAASyD,EAAW,CAAG/F,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACjC,CAACI,EAAsB4F,EAAwB,CACnDhG,CAAAA,EAAAA,EAAAA,QAAAA,EAASuF,GAEX,SAASU,EAA2BC,CAAkC,EAKpE,GAJAA,EAAa/B,cAAc,CAAGzU,EAC5B,IAAI3D,OAAOC,OAAO,GAAKka,EAAatB,SAAS,EAG3C,CAACsB,EAAa7B,iBAAiB,CACjC,OAAO6B,EAGT,GAAM,CAAEV,kBAAAA,CAAiB,CAAEtI,kBAAAA,CAAiB,CAAEwI,YAAAA,CAAW,CAAE,CAAGQ,EAExDC,EAAcX,EAAoBtI,EAAkBhS,MAAM,CAEhEgb,EAAaxB,gBAAgB,CAAGvW,KAAKiY,KAAK,CAAC,IAAMD,GAEjD,IAAME,EACJX,GAAAA,EAAYxa,MAAM,CACd,IAAIa,OAAOC,OAAO,GAClB0Z,CAAW,CAACA,EAAYxa,MAAM,CAAG,EAAE,CAACob,IAAI,CAS9C,GAPIZ,CAAAA,GAAAA,EAAYxa,MAAM,EAAS,IAAIa,OAAOC,OAAO,GAAKqa,EAAW,MAC/DX,EAAY3b,IAAI,CAAC,CACfoc,YAAAA,EACAG,KAAM,IAAIva,OAAOC,OAAO,EAC1B,GAGEma,EAAc,IAAOT,EAAYxa,MAAM,CAAG,GAG5C,OAFAgb,EAAa9B,GAAG,CAAG,iBAEZ8B,EAGT,IAAMK,EAAQb,CAAW,CAAC,EAAE,CACtBc,EAAOd,CAAW,CAACA,EAAYxa,MAAM,CAAG,EAAE,CAC1CyE,EAAW6W,EAAKF,IAAI,CAAGC,EAAMD,IAAI,CACjCG,EAAcD,EAAKL,WAAW,CAAGI,EAAMJ,WAAW,CAMxD,OAHAD,EAAa9B,GAAG,CAAG1U,EAFFC,EAAW8W,EAAc9W,GAG1CuW,EAAaxB,gBAAgB,CAAGvW,KAAKiY,KAAK,CAAC,IAAMI,EAAKL,WAAW,EAE1DD,CACT,CAEA,eAAeb,IACTD,EAAS5U,UAAU,GACrBuV,EAAW,IACXC,EAAwB,IACf,EAAE,GAAGT,CAAY,CAAEX,UAAW,IAAI7Y,OAAOC,OAAO,EAAG,IAE5D6R,EACEuH,EAAS5U,UAAU,CACnBqV,EACA,CACEvU,kBAAkB6M,CAAc,EAC9B6H,EAAwB,GACfC,EAA2B,CAChC,GAAGS,CAAa,CAChBvI,eAAAA,CACF,GAEJ,EACAK,uBACEwH,EAAwB,GACfC,EAA2B,CAChC,GAAGS,CAAa,CAChBpI,mBAAoB,EACtB,GAEJ,EACAO,gBAAgBhL,CAAe,EAC7BmS,EAAwB,GACtB,EAAmB9I,iBAAiB,CAACX,QAAQ,CAAC1I,GAMvC6S,GALLA,EAAcxJ,iBAAiB,CAACnT,IAAI,CAAC8J,GAE9BoS,EAA2BS,IAKxC,EACAzJ,sBAAsBpJ,CAAe,EACnCmS,EAAwB,GACtB,EACiB/H,uBAAuB,CAAC1B,QAAQ,CAAC1I,GAO3C6S,GALLA,EAAczI,uBAAuB,CAAClU,IAAI,CAAC8J,GAEpCoS,EAA2BS,IAKxC,EACAzH,sBACE+G,EAAwB,GACfC,EAA2B,CAChC,GAAGS,CAAa,CAChBrC,kBAAmB,EACrB,GAEJ,EACArF,iBAAiBwG,CAAiB,CAAEzG,CAAM,EACxCiH,EAAwB,IACtB,IAAM5G,EAAUD,EAAW,IAAIuH,EAActH,OAAO,CAAEL,EAAO,EACvDsB,EAAasG,STioB/BhU,CAAkC,EAElC,IAAM2N,EAAcsG,SAvDpBjU,CAAkC,EAElC,IAAMkU,EAAgBC,SAlEtBnU,CAAkC,EAElC,IAAMuC,EAAgC,EAAE,CA0DxC,OApDA6R,MAFkC5T,IAAI,CAAC,IAAI9F,IAHrBsF,EAAUpG,GAAG,CACjC,GAAc6G,EAASA,QAAQ,CAAC0I,YAAY,IAI1B/N,OAAO,CAAC,IAC1B,IAAM8Y,EAAgBlU,EAAUI,MAAM,CACpC,GAAcK,EAASA,QAAQ,CAAC0I,YAAY,EAAIxG,GAE5C0R,EAAyBH,EAAc9T,MAAM,CACjD,GAAcK,GAAAA,EAASgG,MAAM,CAAClO,MAAM,EAEhC+b,EAAsBJ,EAAc9T,MAAM,CAC9C,GAAcK,EAASgG,MAAM,CAAClO,MAAM,CAAG,GAGnC+P,EAA2BtN,EAC/BqZ,EACA,4BAEI7L,EAAaxN,EAAMqZ,EAAwB,cAEjD9R,EAAMnL,IAAI,CAAC,CACTkJ,KAAM4T,CAAa,CAAC,EAAE,CAAC9K,SAAS,CAChCD,aAAc+K,CAAa,CAAC,EAAE,CAACzT,QAAQ,CAAC0I,YAAY,CACpD8E,eAAgBiG,EAAc3b,MAAM,CACpCyH,UAAWqU,EACXC,oBAAAA,EACArO,cAAejL,EAAMqZ,EAAwB,iBAC7CnO,aAAclL,EAAMqZ,EAAwB,gBAC5C9N,gBAAiBvL,EAAMqZ,EAAwB,mBAC/C7N,cAAexL,EAAMqZ,EAAwB,iBAC7CvN,iBAAkB9L,EAAMkZ,EAAe,oBACvClN,oBAAqBhM,EAAMkZ,EAAe,uBAC1CxN,6BAA8BnL,EAC5B2Y,EACA,gCAEF5L,yBAAAA,EACAE,WAAAA,EACAC,gBAAiBzN,EAAMqZ,EAAwB,mBAC/C3L,gBAAiBJ,EAA2BE,EAC5C9C,YAAa1K,EAAMqZ,EAAwB,eAC3C1O,mBAAoB3K,EAAMqZ,EAAwB,sBAClDzO,sBAAuB5K,EACrBqZ,EACA,yBAEFvL,gBAAiB9N,EAAMqZ,EAAwB,mBAC/CtL,aAAc/N,EAAMqZ,EAAwB,gBAC5CzL,WAAY5N,EAAMkZ,EAAe,cACjCrL,cAAe7N,EAAMkZ,EAAe,iBACpCvL,eAAgB3N,EAAMqZ,EAAwB,kBAC9CrL,aAAchO,EAAMkZ,EAAe,eACrC,EACF,GAEO3R,CACT,EAKiDvC,GACzCuU,EAA6B,EAAE,CA8CrC,OA1CAC,MAF6BhU,IAAI,CAAC,IAAI9F,IADrBwZ,EAActa,GAAG,CAAC,GAAgB6a,EAAWnU,IAAI,CAACuJ,QAAQ,IAG5DzO,OAAO,CAAC,IACrB,IAAMsZ,EAAgBR,EAAc9T,MAAM,CACxC,GAAmB8T,EAAc5T,IAAI,CAACuJ,QAAQ,EAAIgD,GAG9CvE,EAA2BtN,EAC/B0Z,EACA,4BAEIlM,EAAaxN,EAAM0Z,EAAe,cAExCH,EAAOnd,IAAI,CAAC,CACVkJ,KAAMoU,CAAa,CAAC,EAAE,CAACpU,IAAI,CAC3BqU,gBAAiBD,EACjB1G,WAAY0G,EAAcnc,MAAM,CAChC0V,eAAgBjT,EAAM0Z,EAAe,kBACrCzO,cAAejL,EAAM0Z,EAAe,iBACpCxO,aAAclL,EAAM0Z,EAAe,gBACnCnO,gBAAiBvL,EAAM0Z,EAAe,mBACtClO,cAAexL,EAAM0Z,EAAe,iBACpC5N,iBAAkB9L,EAAM0Z,EAAe,oBACvC1N,oBAAqBhM,EAAM0Z,EAAe,uBAC1ChO,6BAA8BnL,EAC5BmZ,EACA,gCAEFpM,yBAAAA,EACAE,WAAAA,EACAC,gBAAiBzN,EAAM0Z,EAAe,mBACtChM,gBAAiBJ,EAA2BE,EAC5C9C,YAAa1K,EAAM0Z,EAAe,eAClC/O,mBAAoB3K,EAAM0Z,EAAe,sBACzC9O,sBAAuB5K,EAAM0Z,EAAe,yBAC5C5L,gBAAiB9N,EAAM0Z,EAAe,mBACtC3L,aAAc/N,EAAM0Z,EAAe,gBACnC9L,WAAY5N,EAAM0Z,EAAe,cACjC7L,cAAe7N,EAAM0Z,EAAe,iBACpC/L,eAAgB3N,EAAM0Z,EAAe,kBACrC1L,aAAchO,EAAM0Z,EAAe,eACrC,EACF,GAEOH,CACT,EAK2CvU,GAEnCsI,EAA2BtN,EAC/B2S,EACA,4BAEInF,EAAaxN,EAAM2S,EAAa,cAEtC,MAAO,CACLA,YAAAA,EACAmF,iBAAkB9X,EAAM2S,EAAa,mBACrCK,WAAYhT,EAAM2S,EAAa,cAC/BM,eAAgBjT,EAAM2S,EAAa,kBACnC1H,cAAejL,EAAM2S,EAAa,iBAClCzH,aAAclL,EAAM2S,EAAa,gBACjCpH,gBAAiBvL,EAAM2S,EAAa,mBACpCnH,cAAexL,EAAM2S,EAAa,iBAClC7G,iBAAkB9L,EAAM2S,EAAa,oBACrC3G,oBAAqBhM,EAAM2S,EAAa,uBACxCjH,6BAA8BnL,EAC5BoS,EACA,gCAEFrF,yBAAAA,EACAE,WAAAA,EACAC,gBAAiBzN,EAAM2S,EAAa,mBACpCjF,gBAAiBJ,EAA2BE,EAC5C9C,YAAa1K,EAAM2S,EAAa,eAChChI,mBAAoB3K,EAAM2S,EAAa,sBACvC/H,sBAAuB5K,EAAM2S,EAAa,yBAC1C7E,gBAAiB9N,EAAM2S,EAAa,mBACpC5E,aAAc/N,EAAM2S,EAAa,gBACjC/E,WAAY5N,EAAM2S,EAAa,cAC/B9E,cAAe7N,EAAM2S,EAAa,iBAClChF,eAAgB3N,EAAM2S,EAAa,kBACnC3E,aAAchO,EAAM2S,EAAa,eACnC,CACF,ESxqBsDlB,GAIxC,OAFAiB,EAAWC,WAAW,CAAGnB,EAAWkB,EAAWC,WAAW,EAEnD2F,EAA2B,CAChC,GAAGS,CAAa,CAChBlB,kBAAAA,EACApG,QAAAA,EACAiB,WAAAA,CACF,EACF,EACF,EACA9O,SACEwU,EAAW,IACXC,EAAwB,GACf,EACL,GAAGU,CAAa,CAChBpC,KAAM,EACR,GAEJ,CACF,GAGN,CAEA,MACE,GAAA/D,EAAAC,GAAA,EAAC+G,EAAAA,CAAaA,CAAAA,UACZ,GAAAhH,EAAAQ,IAAA,EAACyG,UAAAA,CAAQ1G,UAAU,0EACjB,GAAAP,EAAAQ,IAAA,EAACF,MAAAA,CAAIC,UAAU,6DACb,GAAAP,EAAAC,GAAA,EAACiH,KAAAA,CAAG3G,UAAW2B,CAAAA,EAAAA,EAAAA,CAAAA,aAAS,4BACxB,GAAAlC,EAAAC,GAAA,EAACkH,KAAAA,CAAG5G,UAAW6G,CAAAA,EAAAA,EAAAA,CAAAA,EAAS,CAAEC,MAAO,MAAO,YAAI,yCAK9C,GAAArH,EAAAC,GAAA,EAACK,MAAAA,CAAIC,UAAU,eAEf,GAAAP,EAAAC,GAAA,EAACqE,GAAUA,CACTO,SAAUA,EACVC,iBAAkBA,EAClB/C,QAASA,EACT4C,SAAU,GAAWY,EAAiBX,EAAM0C,MAAM,CAACnb,KAAK,IAE1D,GAAA6T,EAAAC,GAAA,EAACK,MAAAA,CAAIC,UAAU,kBACb,GAAAP,EAAAC,GAAA,EAACmE,GAAaA,CACZrC,QAASA,EACTlC,qBAAsBA,UAMlC","sources":["webpack://_N_E/","webpack://_N_E/./services/util.ts","webpack://_N_E/./services/connection.ts","webpack://_N_E/./services/meteora-dlmm-api.ts","webpack://_N_E/./services/jupiter-price.ts","webpack://_N_E/./services/jupiter-token-list.ts","webpack://_N_E/./services/profit-downloader.ts","webpack://_N_E/./components/user-position-list.tsx","webpack://_N_E/./components/loading-status-item.tsx","webpack://_N_E/./components/missing-transactions-download-button.tsx","webpack://_N_E/./components/all-positions-download-button.tsx","webpack://_N_E/./components/valid-positions-download-button.tsx","webpack://_N_E/./components/loading-summary.tsx","webpack://_N_E/./components/profit-display.tsx","webpack://_N_E/./components/wallet-form.tsx","webpack://_N_E/./pages/index.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/\"])\n      });\n    }\n  ","import { type AnyFunction, ThrottledFunction } from \"p-throttle\";\n\nexport type UnifiedFetcher = (url: string) => Promise<UnifiedResponse>;\nexport type UnifiedMultiFetcher = (url: string[]) => Promise<UnifiedResponse[]>;\n\nexport interface UnifiedResponse {\n  text: () => Promise<string>;\n}\n\nexport interface ThrottledCachedRequestOptions<\n  RequestParams extends any[],\n  Response,\n> {\n  fn: (...args: RequestParams) => Promise<Response>;\n  throttle?: <F extends AnyFunction>(function_: F) => ThrottledFunction<F>;\n  maxAge?: number;\n}\n\nexport interface ThrottledCachedResponse<Response> {\n  loadTime: number;\n  response: Response;\n}\n\nexport async function multiFetch(urls: string[]): Promise<UnifiedResponse[]> {\n  return Promise.all(urls.map((url) => fetch(url)));\n}\n\nexport async function delay(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport async function exponentialRetryDelay<T>(\n  fn: () => Promise<T>,\n  ms = 1000,\n  retries = 0,\n  maxRetries = 3,\n): Promise<T> {\n  try {\n    return fn();\n  } catch (err) {\n    if (retries > maxRetries) {\n      const errMsg = `Failed to execute ${fn.toString()} after ${maxRetries} retries`;\n\n      throw new Error(errMsg);\n    }\n    await delay(ms);\n\n    return exponentialRetryDelay(fn, ms * 2, retries + 1, maxRetries);\n  }\n}\n\nclass ThrottledCachedRequest<RequestParams extends any[], Response> {\n  private _requestQueue: Map<string, Array<(response: Response) => void>> =\n    new Map();\n  private _responseCache: Map<string, ThrottledCachedResponse<Response>> =\n    new Map();\n  private _fetching: Set<string> = new Set();\n  private _fn: (...args: RequestParams) => Promise<Response>;\n  private _maxAge: number;\n\n  constructor(options: ThrottledCachedRequestOptions<RequestParams, Response>) {\n    const { fn, throttle, maxAge } = options;\n\n    this._fn = throttle ? throttle(fn) : fn;\n    this._maxAge = maxAge ? maxAge : 1000 * 60 * 5;\n  }\n\n  get(...args: RequestParams): Promise<Response> {\n    return new Promise(async (resolve: (value: Response) => void) => {\n      const argsStr = this._stringifyArgs(args);\n\n      this._queueRequest(argsStr, resolve);\n\n      if (!this._fetching.has(argsStr) && this._requiresRefresh(argsStr)) {\n        this._fetching.add(argsStr);\n        const response = await this._fn(...args);\n\n        const loadTime = new Date().getTime();\n\n        this._responseCache.set(argsStr, { loadTime, response });\n        this._fetching.delete(argsStr);\n        this._processQueue(argsStr);\n      }\n      this._processQueue(argsStr);\n    });\n  }\n\n  private _stringifyArgs(args: RequestParams) {\n    return Object.values(args)\n      .map((value) => {\n        try {\n          return JSON.stringify(value);\n        } catch (err) {\n          return \"\";\n        }\n      })\n      .join(\"\");\n  }\n\n  private _requiresRefresh(argsStr: string): boolean {\n    const response = this._responseCache.get(argsStr);\n\n    return (\n      !response ||\n      (response && new Date().getTime() - response.loadTime > this._maxAge)\n    );\n  }\n\n  private _queueRequest(\n    argsStr: string,\n    resolve: (response: Response) => void,\n  ) {\n    const existingQueue = this._requestQueue.get(argsStr);\n\n    if (existingQueue) {\n      existingQueue.push(resolve);\n\n      return;\n    }\n    const newQueue: Array<(response: Response) => void> = [resolve];\n\n    this._requestQueue.set(argsStr, newQueue);\n  }\n\n  private _processQueue(argsStr: string) {\n    const queue = this._requestQueue.get(argsStr)!;\n\n    if (queue.length > 0 && !this._fetching.has(argsStr)) {\n    }\n    while (queue.length > 0 && !this._fetching.has(argsStr)) {\n      queue[0](this._responseCache.get(argsStr)!.response);\n      queue.shift();\n    }\n  }\n}\n\nexport function throttledCachedRequest<RequestParams extends any[], Response>(\n  fn: (...args: RequestParams) => Promise<Response>,\n  throttle: <F extends AnyFunction>(function_: F) => ThrottledFunction<F>,\n  maxAge?: number,\n): (...args: RequestParams) => Promise<Response> {\n  const cachedRequest = new ThrottledCachedRequest({ fn, throttle, maxAge });\n\n  return cachedRequest.get.bind(cachedRequest);\n}\n\nexport function cachedRequest<RequestParams extends any[], Response>(\n  fn: (...args: RequestParams) => Promise<Response>,\n  maxAge?: number,\n): (...args: RequestParams) => Promise<Response> {\n  const cachedRequest = new ThrottledCachedRequest({ fn, maxAge });\n\n  return cachedRequest.get.bind(cachedRequest);\n}\n\nexport function total<T>(arr: Array<T>, key: keyof T): number {\n  let sum = 0;\n\n  arr.forEach((obj) => {\n    const value = obj[key];\n\n    if (typeof value === \"number\" && !isNaN(value)) {\n      sum += value;\n    }\n  });\n\n  return sum;\n}\n\nexport function max<T>(arr: Array<T>, key: keyof T): number {\n  let values: number[] = [];\n\n  arr.forEach((obj) => {\n    const value = obj[key];\n\n    if (typeof value === \"number\" && !isNaN(value)) {\n      values.push(value);\n    }\n  });\n\n  return Math.max(...values);\n}\n\nexport function downloadStringToFile(filename: string, text: string) {\n  const element = document.createElement(\"a\");\n\n  element.setAttribute(\n    \"href\",\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text),\n  );\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n}\n\nfunction objArrayToCsvString(objArray: Array<Object>): string {\n  if (objArray.length == 0) {\n    return \"\";\n  }\n\n  const output = Object.keys(objArray[0]).join(\",\");\n  const lines: string[] = [];\n\n  objArray.forEach((obj) => {\n    const line = Object.values(obj)\n      .map((value) =>\n        value !== undefined && value !== null && typeof value != \"object\"\n          ? '\"' + value.toString().replace(/\"/g, '\"\"') + '\"'\n          : \"\",\n      )\n      .join(\",\");\n\n    lines.push(line);\n  });\n\n  return output + \"\\n\" + lines.join(\"\\n\");\n}\n\nexport function downloadObjArrayAsCsv(\n  filename: string,\n  objArray: Array<Object>,\n) {\n  downloadStringToFile(filename, objArrayToCsvString(objArray));\n}\n\nexport function isValidUrl(url: string): boolean {\n  try {\n    new URL(url);\n\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nexport function getDurationString(duration: number) {\n  const estimateInSeconds = Math.floor(duration / 1000);\n  const minutes = Math.floor(estimateInSeconds / 60);\n  const seconds = estimateInSeconds % 60;\n\n  return `${minutes > 0 ? `${minutes}m, ` : \"\"}${seconds}s`;\n}\n","import pThrottle from \"p-throttle\";\nimport DLMM, { LbPosition } from \"@meteora-ag/dlmm\";\nimport {\n  AccountInfo,\n  ConfirmedSignatureInfo,\n  Connection,\n  ParsedAccountData,\n  ParsedTransactionWithMeta,\n  PublicKey,\n  RpcResponseAndContext,\n} from \"@solana/web3.js\";\nimport { type Idl } from \"@project-serum/anchor\";\nimport { IDL } from \"@meteora-ag/dlmm\";\nimport { SolanaParser } from \"@debridge-finance/solana-transaction-parser\";\n\nimport { METEORA_PROGRAM_ID, RPC_MAX_TPS } from \"./config\";\nimport { exponentialRetryDelay, throttledCachedRequest } from \"./util\";\n\nconst THROTTLE_RPC = pThrottle({\n  limit: Number(RPC_MAX_TPS),\n  interval: 1000,\n  strict: true,\n});\n\nexport const getDlmm: (\n  connection: Connection,\n  poolAddress: string,\n) => Promise<DLMM> = throttledCachedRequest(\n  (connection: Connection, poolAddress: string) => {\n    return exponentialRetryDelay(() =>\n      DLMM.create(connection, new PublicKey(poolAddress)),\n    );\n  },\n  THROTTLE_RPC,\n);\n\nexport const getDlmmAndUserPositions = throttledCachedRequest(\n  async (\n    connection: Connection,\n    poolAddress: string,\n    owner: string,\n  ): Promise<{\n    dlmmPool: DLMM;\n    userPositions: LbPosition[];\n  }> => {\n    const dlmmPool = await getDlmm(connection, poolAddress);\n\n    const { userPositions } = await dlmmPool.getPositionsByUserAndLbPair(\n      new PublicKey(owner),\n    );\n\n    return { dlmmPool, userPositions };\n  },\n  THROTTLE_RPC,\n);\n\nconst getSignaturesForAddress = THROTTLE_RPC(\n  async (connection: Connection, pubKey: PublicKey, before?: string) => {\n    return exponentialRetryDelay(() =>\n      connection.getSignaturesForAddress(pubKey, { before }),\n    );\n  },\n);\n\nexport async function getAllSignaturesForAddress(\n  connection: Connection,\n  address: string,\n  onSignaturesFound?: (signatures: ConfirmedSignatureInfo[]) => any,\n  onDone?: () => any,\n): Promise<ConfirmedSignatureInfo[]> {\n  const pubKey = new PublicKey(address);\n  let before: string | undefined = undefined;\n  let newSignatures: ConfirmedSignatureInfo[] = [];\n  const allSignatures: ConfirmedSignatureInfo[] = [];\n\n  do {\n    before =\n      newSignatures.length > 0\n        ? newSignatures[newSignatures.length - 1].signature\n        : undefined;\n    newSignatures = await getSignaturesForAddress(connection, pubKey, before);\n    allSignatures.push(...newSignatures);\n\n    if (onSignaturesFound) {\n      onSignaturesFound(newSignatures);\n    }\n  } while (newSignatures.length != 0);\n  if (onDone) {\n    onDone();\n  }\n\n  return allSignatures;\n}\n\nexport const getParsedTransactions: (\n  connection: Connection,\n  signatures: string[],\n  ms?: number,\n) => Promise<(ParsedTransactionWithMeta | null)[]> = THROTTLE_RPC(\n  async (connection: Connection, signatures: string[]) => {\n    return exponentialRetryDelay(() =>\n      connection.getParsedTransactions(signatures, {\n        maxSupportedTransactionVersion: 0,\n        commitment: \"confirmed\",\n      }),\n    );\n  },\n);\n\nexport const getParsedAccountInfo: (\n  connection: Connection,\n  address: string,\n) => Promise<\n  RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n> = THROTTLE_RPC(async (connection: Connection, address: string) => {\n  return exponentialRetryDelay(() => {\n    return connection.getParsedAccountInfo(new PublicKey(address));\n  });\n});\n\nexport const getPositionAddressesFromSignature = THROTTLE_RPC(\n  async (connection: Connection, txSignature: string): Promise<string[]> => {\n    const parser = new SolanaParser([\n      {\n        idl: IDL as Idl,\n        programId: METEORA_PROGRAM_ID,\n      },\n    ]);\n    const tx = await parser.parseTransaction(connection, txSignature, false);\n\n    if (tx == undefined) {\n      return [];\n    }\n    const accounts = tx.map((data) => data.accounts).flat();\n    const positions = accounts.filter((account) => account.name == \"position\");\n\n    if (!positions) {\n      return [];\n    }\n\n    const postiionAddresses = positions.map((position) =>\n      position.pubkey.toBase58(),\n    );\n\n    return Array.from(new Set(postiionAddresses));\n  },\n);\n","import pThrottle from \"p-throttle\";\n\nimport {\n  METEORA_API,\n  METEORA_API_PAIR_ENDPOINT,\n  METEORA_API_POSITION_ENDPOINT,\n} from \"./config\";\nimport { UnifiedFetcher, cachedRequest } from \"./util\";\n\nexport interface MeteoraPositionData {\n  address: string;\n  pair_address: string;\n  owner: string;\n  total_fee_x_claimed: number;\n  total_fee_y_claimed: number;\n  total_reward_x_claimed: number;\n  total_reward_y_claimed: number;\n  total_fee_usd_claimed: number;\n  total_reward_usd_claimed: number;\n  fee_apy_24h: number;\n  fee_apr_24h: number;\n  daily_fee_yield: number;\n}\n\nexport interface MeteoraTransactionData {\n  tx_id: string;\n  position_address: string;\n  pair_address: string;\n  active_bin_id: number;\n  token_x_amount: number;\n  token_y_amount: number;\n  price: number;\n  token_x_usd_amount: number;\n  token_y_usd_amount: number;\n  onchain_timestamp: number;\n}\n\nexport interface MeteoraClaimFeesData {\n  active_bin_id: number;\n  onchain_timestamp: number;\n  pair_address: string;\n  position_address: string;\n  price: number;\n  token_x_amount: number;\n  token_x_usd_amount: number;\n  token_y_amount: number;\n  token_y_usd_amount: number;\n  tx_id: string;\n}\n\nexport interface MeteoraClaimRewardsData {\n  onchain_timestamp: number;\n  pair_address: string;\n  position_address: string;\n  reward_mint_address: string;\n  token_amount: number;\n  token_usd_amount: number;\n  tx_id: string;\n}\n\nexport interface MeteoraPositionWithTransactions {\n  position: MeteoraPositionData;\n  deposits: MeteoraTransactionData[];\n  withdraws: MeteoraTransactionData[];\n}\n\nexport interface MeteoraDlmmPair {\n  address: string;\n  name: string;\n  mint_x: string;\n  mint_y: string;\n  reserve_x: string;\n  reserve_y: string;\n  reserve_x_amount: number;\n  reserve_y_amount: number;\n  bin_step: number;\n  base_fee_percentage: string;\n  max_fee_percentage: string;\n  protocol_fee_percentage: string;\n  liquidity: string;\n  reward_mint_x: string;\n  reward_mint_y: string;\n  fees_24h: number;\n  today_fees: number;\n  trade_volume_24h: number;\n  cumulative_trade_volume: string;\n  cumulative_fee_volume: string;\n  current_price: number;\n  apr: number;\n  apy: number;\n  farm_apr: number;\n  farm_apy: number;\n  hide: boolean;\n}\n\nexport const THROTTLE_METEORA_SUMMARY_API = pThrottle({\n  limit: 2,\n  interval: 1000,\n  strict: true,\n});\n\nexport const THROTTLE_METEORA_DETAIL_API = pThrottle({\n  limit: 4,\n  interval: 1000,\n  strict: true,\n});\n\nconst fetchPosition = THROTTLE_METEORA_SUMMARY_API((positionAddress: string) =>\n  fetch(METEORA_API + METEORA_API_POSITION_ENDPOINT + \"/\" + positionAddress),\n);\nconst fetchDeposits = THROTTLE_METEORA_DETAIL_API((positionAddress: string) =>\n  fetch(\n    METEORA_API +\n      METEORA_API_POSITION_ENDPOINT +\n      \"/\" +\n      positionAddress +\n      \"/deposits\",\n  ),\n);\nconst fetchWithdraws = THROTTLE_METEORA_DETAIL_API((positionAddress: string) =>\n  fetch(\n    METEORA_API +\n      METEORA_API_POSITION_ENDPOINT +\n      \"/\" +\n      positionAddress +\n      \"/withdraws\",\n  ),\n);\nconst fetchClaimFees = THROTTLE_METEORA_DETAIL_API((positionAddress: string) =>\n  fetch(\n    METEORA_API +\n      METEORA_API_POSITION_ENDPOINT +\n      \"/\" +\n      positionAddress +\n      \"/claim_fees\",\n  ),\n);\nconst fetchClaimRewards = THROTTLE_METEORA_DETAIL_API(\n  (positionAddress: string) =>\n    fetch(\n      METEORA_API +\n        METEORA_API_POSITION_ENDPOINT +\n        \"/\" +\n        positionAddress +\n        \"/claim_rewards\",\n    ),\n);\n\nexport async function OLD_getPositionData(\n  positionAddress: string,\n): Promise<MeteoraPositionWithTransactions | undefined> {\n  try {\n    const [positionResponse, depositsResponse, withdrawsResponse] =\n      await Promise.all([\n        fetchPosition(positionAddress),\n        fetchDeposits(positionAddress),\n        fetchWithdraws(positionAddress),\n      ]);\n\n    const [position, deposits, withdraws] = await Promise.all([\n      positionResponse.json() as unknown as MeteoraPositionData,\n      depositsResponse.json() as unknown as MeteoraTransactionData[],\n      withdrawsResponse.json() as unknown as MeteoraTransactionData[],\n    ]);\n\n    return {\n      position,\n      deposits,\n      withdraws,\n    };\n  } catch (err) {\n    return undefined;\n  }\n}\n\nexport async function getPositionData(\n  positionAddress: string,\n): Promise<MeteoraPositionWithTransactions | undefined> {\n  const positionResponse: Response = await fetchPosition(positionAddress);\n\n  if (positionResponse.status == 500) {\n    console.warn(`Position ${positionAddress} not found`);\n\n    return undefined;\n  }\n\n  if (positionResponse.status == 429) {\n    const errMsg = `Throttled while loading ${positionAddress}`;\n\n    console.error(errMsg);\n    throw new Error(errMsg);\n  }\n\n  try {\n    const position =\n      (await positionResponse.json()) as unknown as MeteoraPositionData;\n\n    return getPositionDetails(position);\n  } catch (err) {\n    console.warn(`Position ${positionAddress} not found`);\n    console.error(err);\n\n    return undefined;\n  }\n}\n\nasync function getPositionDetails(position: MeteoraPositionData) {\n  const [depositsResponse, withdrawsResponse] = await Promise.all([\n    fetchDeposits(position.address),\n    fetchWithdraws(position.address),\n  ]);\n\n  const [deposits, withdraws] = await Promise.all([\n    depositsResponse.json() as unknown as MeteoraTransactionData[],\n    withdrawsResponse.json() as unknown as MeteoraTransactionData[],\n  ]);\n\n  return {\n    position,\n    deposits,\n    withdraws,\n  };\n}\n\nexport const getPairs = cachedRequest(\n  async (fetcher: UnifiedFetcher = fetch) => {\n    const pairResponse = await fetcher(METEORA_API + METEORA_API_PAIR_ENDPOINT);\n    const pairs = JSON.parse(await pairResponse.text()) as MeteoraDlmmPair[];\n\n    return {\n      lastUpdated: new Date().getTime(),\n      pairs,\n    };\n  },\n);\n\nexport async function getPairData(\n  pairAddress: string,\n  fetcher: UnifiedFetcher = fetch,\n) {\n  const pairs = await getPairs(fetcher);\n\n  return pairs.pairs.find((pair) => pair.address == pairAddress)!;\n}\n","import { JUPITER_PRICE_API } from \"./config\";\nimport { cachedRequest } from \"./util\";\n\nexport interface JupiterPriceResponse {\n  data: {\n    [symbol: string]: JupiterPrice;\n  };\n  timeTaken: number;\n}\n\nexport interface JupiterPrice {\n  id: string;\n  mintSymbol: string;\n  vsToken: string;\n  vsTokenSymbol: string;\n  price: number;\n}\n\nexport const getPrice = cachedRequest(\n  async (token: string): Promise<JupiterPrice> => {\n    const response = await fetch(JUPITER_PRICE_API + token);\n    const responseJson = (await response.json()) as JupiterPriceResponse;\n\n    return responseJson.data[token];\n  },\n);\n","import { Connection } from \"@solana/web3.js\";\n\nimport { cachedRequest, type UnifiedFetcher } from \"./util\";\nimport {\n  JUPITER_TOKEN_ALL_LIST_API,\n  JUPITER_TOKEN_STRICT_LIST_API,\n} from \"./config\";\nimport { getParsedAccountInfo } from \"./connection\";\nimport { getPrice } from \"./jupiter-price\";\n\nexport interface JupiterTokenListToken {\n  address: string;\n  chainId: number;\n  decimals: number;\n  name: string;\n  symbol: string;\n  logoURI?: string;\n  tags: JupiterTokenListTag[];\n  extensions?: JupiterTokenListExtensions;\n}\n\nexport interface JupiterTokenListExtensions {\n  coingeckoId?: string;\n  isBanned?: boolean;\n}\n\nexport enum JupiterTokenListTag {\n  Community = \"community\",\n  OldRegistry = \"old-registry\",\n  SolanaFm = \"solana-fm\",\n  Token2022 = \"token-2022\",\n  Unknown = \"unknown\",\n  Wormhole = \"wormhole\",\n}\n\nexport const getJupiterTokenList = cachedRequest(\n  async (\n    fetcher: UnifiedFetcher = fetch,\n    listType: \"all\" | \"strict\",\n  ): Promise<Map<string, JupiterTokenListToken>> => {\n    const url =\n      listType == \"strict\"\n        ? JUPITER_TOKEN_STRICT_LIST_API\n        : JUPITER_TOKEN_ALL_LIST_API;\n\n    const response = await fetcher(url);\n    const responseText = await response.text();\n\n    const tokenList = JSON.parse(responseText) as JupiterTokenListToken[];\n    const tokenMap: Map<string, JupiterTokenListToken> = new Map();\n\n    tokenList.forEach((token) => tokenMap.set(token.address, token));\n\n    return tokenMap;\n  },\n);\n\nexport async function lamportsToDecimal(\n  connection: Connection,\n  address: string,\n  lamports: number,\n): Promise<number> {\n  const tokenMap = await getJupiterTokenList(fetch, \"all\");\n  const jupiterToken = tokenMap.get(address);\n\n  if (jupiterToken) {\n    return lamports / 10 ** jupiterToken.decimals;\n  }\n\n  const accountInfo = await getParsedAccountInfo(connection, address);\n\n  if (\n    !accountInfo?.value?.data ||\n    (accountInfo.value.data && !(\"parsed\" in accountInfo.value.data))\n  ) {\n    throw new Error(`${address} is not a valid token address!`);\n  }\n\n  return lamports / 10 ** accountInfo.value.data.parsed.decimals;\n}\n\nexport async function lamportsToUsd(\n  connection: Connection,\n  address: string,\n  lamports: number,\n): Promise<number> {\n  const [decimals, price] = await Promise.all([\n    lamportsToDecimal(connection, address, lamports),\n    getPrice(address),\n  ]);\n\n  return decimals * price.price;\n}\n","import { LbPosition } from \"@meteora-ag/dlmm\";\nimport {\n  ConfirmedSignatureInfo,\n  Connection,\n  ParsedTransactionWithMeta,\n  PartiallyDecodedInstruction,\n} from \"@solana/web3.js\";\n\nimport {\n  getAllSignaturesForAddress,\n  getParsedTransactions,\n  getPositionAddressesFromSignature,\n} from \"./connection\";\nimport {\n  MeteoraPositionWithTransactions,\n  getPositionData,\n  MeteoraDlmmPair,\n  MeteoraTransactionData,\n  getPairData,\n} from \"./meteora-dlmm-api\";\nimport { lamportsToUsd } from \"./jupiter-token-list\";\nimport { METEORA_PROGRAM_ID } from \"./config\";\nimport { total, max } from \"./util\";\n\ninterface MeteoraPositionMints {\n  mintX: string;\n  mintY: string;\n  reward1Mint: string | null;\n  reward2Mint: string | null;\n}\n\ninterface MeteoraPairGroupName {\n  group_name: string;\n  group_id: string;\n}\n\ninterface MeteoraPairName extends MeteoraPairGroupName {\n  name: string;\n}\n\ninterface MeteoraPositionWithTransactionMintsAndLbPosition\n  extends MeteoraPositionWithTransactions {\n  pair_name: MeteoraPairName;\n  mints: MeteoraPositionMints;\n  lbPosition?: LbPosition;\n}\n\ninterface MeteoraCurrentValueData {\n  current_usd: number;\n  unclaimed_fees_usd: number;\n  unclaimed_rewards_usd: number;\n}\n\ninterface MeteoraSummaryData {\n  deposit_count: number;\n  deposits_usd: number;\n  withdraws_count: number;\n  withdraws_usd: number;\n  claimed_fees_usd: number;\n  claimed_rewards_usd: number;\n  most_recent_deposit_withdraw: number;\n}\n\ninterface MeteoraPositionSummaryData extends MeteoraSummaryData {\n  is_closed?: boolean;\n  errors: string[];\n}\n\ninterface MeteoraBalanceChange {\n  tx_id: string;\n  transaction_type: \"deposit\" | \"withdraw\";\n  timestamp_ms: number;\n  balance_change_usd: number;\n}\n\ninterface MeteoraBalance {\n  tx_id_balance_start: string;\n  tx_id_balance_end: string | null;\n  timestamp_ms_balance_start: number;\n  timestamp_ms_balance_end: number;\n  balance_age_ms: number;\n  transaction_type: \"deposit\" | \"withdraw\";\n  balance_change_usd: number;\n  balance_usd: number;\n}\n\ninterface MeteoraBalanceSummaryData {\n  balance_time_sum_product: number;\n  total_time: number;\n  total_time_days: number;\n  average_balance: number;\n}\n\ninterface MeteoraProfitData {\n  position_profit: number;\n  total_profit: number;\n  fee_points: number;\n  reward_points: number;\n  balance_points: number;\n  total_points: number;\n}\n\nexport interface MeteoraPositionProfit\n  extends MeteoraPositionWithTransactionMintsAndLbPosition,\n    MeteoraPositionSummaryData,\n    MeteoraCurrentValueData,\n    MeteoraBalanceSummaryData,\n    MeteoraProfitData {\n  balances: MeteoraBalance[];\n}\n\ninterface MeteoraPositionGroup\n  extends MeteoraSummaryData,\n    MeteoraCurrentValueData,\n    MeteoraBalanceSummaryData,\n    MeteoraProfitData {\n  name: MeteoraPairGroupName;\n  pair_address: string;\n  positions: MeteoraPositionProfit[];\n  positionsWithErrors: MeteoraPositionProfit[];\n  position_count: number;\n}\n\nexport interface MeteoraPairGroup\n  extends MeteoraSummaryData,\n    MeteoraCurrentValueData,\n    MeteoraBalanceSummaryData,\n    MeteoraProfitData {\n  name: MeteoraPairGroupName;\n  position_groups: MeteoraPositionGroup[];\n  position_count: number;\n  pair_count: number;\n}\n\nexport interface MeteoraUserProfit\n  extends MeteoraSummaryData,\n    MeteoraCurrentValueData,\n    MeteoraBalanceSummaryData,\n    MeteoraProfitData {\n  pair_groups: MeteoraPairGroup[];\n  pair_group_count: number;\n  pair_count: number;\n  position_count: number;\n}\n\nfunction nameIsReversed(symbol1: string, symbol2: string) {\n  // If SOL, USDC, or USDT is the first symbol, it may be reversed\n  if ([\"SOL\", \"USDC\", \"USDT\"].includes(symbol1)) {\n    if (symbol1 == \"SOL\") {\n      // If USDC or USDT is the second symbol, it's not reversed\n      if ([\"USDC\", \"USDT\"].includes(symbol2)) {\n        return false;\n      }\n\n      // For anything else, SOL should be the quote symbol, so it's reversed\n      return true;\n    }\n\n    // If we have a pair with USDC and USDT, check to see if it's reversed\n    if (\n      [\"USDC\", \"USDT\"].includes(symbol1) &&\n      [\"USDC\", \"USDT\"].includes(symbol2)\n    ) {\n      // If USDT is first, it's reversed\n      if (symbol1 == \"USDT\") {\n        return true;\n      }\n\n      // USDT isn't first, it's not reversed\n      return false;\n    }\n\n    // If both symbols aren't USDC  & USDT, it's reversed\n    return true;\n  }\n\n  // First symbol isn't SOL, USDC, or USDC, so it's not reversed\n  return false;\n}\n\nfunction getPairName(pairInfo: MeteoraDlmmPair): MeteoraPairName {\n  const [symbol1, symbol2] = pairInfo.name.split(\"-\");\n\n  const name = pairInfo.name;\n  const reversedName = `${symbol2}-${symbol1}`;\n  const group_name = nameIsReversed(symbol1, symbol2) ? reversedName : name;\n  const group_id = [pairInfo.mint_x, pairInfo.mint_y]\n    .sort((a, b) => (a < b ? 0 : 1))\n    .join(\"\");\n\n  return {\n    name,\n    group_name,\n    group_id,\n  };\n}\n\nfunction getPositionMints(poolInfo: MeteoraDlmmPair): MeteoraPositionMints {\n  return {\n    mintX: poolInfo.mint_x,\n    mintY: poolInfo.mint_y,\n    reward1Mint: poolInfo.reward_mint_x,\n    reward2Mint: poolInfo.reward_mint_y,\n  };\n}\n\nfunction getSummaryData(\n  postiion: MeteoraPositionWithTransactionMintsAndLbPosition,\n  deposits: MeteoraTransactionData[],\n  withdraws: MeteoraTransactionData[],\n): MeteoraPositionSummaryData {\n  const deposit_count = deposits.length;\n  const deposits_usd =\n    deposits.length == 0\n      ? 0\n      : deposits\n          .map((tx) => tx.token_x_usd_amount + tx.token_y_usd_amount)\n          .reduce((total, current) => total + current);\n  const withdraws_count = withdraws.length;\n  const withdraws_usd =\n    withdraws.length == 0\n      ? 0\n      : withdraws\n          .map((tx) => tx.token_x_usd_amount + tx.token_y_usd_amount)\n          .reduce((total, current) => total + current);\n\n  const errors: string[] = [];\n\n  if (deposit_count == 0) {\n    errors.push(\"No deposits found\");\n  }\n  if (deposits_usd == 0) {\n    errors.push(\"Deposits sum to 0 USD\");\n  }\n  if (withdraws_count > 0 && withdraws_usd == 0) {\n    errors.push(\"Withdraws sum to 0 USD\");\n  }\n  const most_recent_deposit_withdraw = Math.max(\n    ...deposits\n      .map((deposit) => deposit.onchain_timestamp * 1000)\n      .concat(withdraws.map((withdraw) => withdraw.onchain_timestamp * 1000)),\n  );\n\n  return {\n    deposit_count,\n    deposits_usd,\n    withdraws_count,\n    withdraws_usd,\n    claimed_fees_usd: postiion.position.total_fee_usd_claimed,\n    claimed_rewards_usd: postiion.position.total_reward_usd_claimed,\n    most_recent_deposit_withdraw,\n    errors,\n  };\n}\n\nfunction getBalances(\n  deposits: MeteoraTransactionData[],\n  withdraws: MeteoraTransactionData[],\n) {\n  const balanceChanges: MeteoraBalanceChange[] = deposits\n    .map((tx) => {\n      return {\n        tx_id: tx.tx_id,\n        transaction_type: \"deposit\",\n        timestamp_ms: tx.onchain_timestamp * 1000,\n        balance_change_usd: tx.token_x_usd_amount + tx.token_y_usd_amount,\n      } as MeteoraBalanceChange;\n    })\n    .concat(\n      withdraws.map((tx) => {\n        return {\n          tx_id: tx.tx_id,\n          transaction_type: \"withdraw\",\n          timestamp_ms: tx.onchain_timestamp * 1000,\n          balance_change_usd: -tx.token_x_usd_amount - tx.token_y_usd_amount,\n        };\n      }),\n    )\n    .sort((a, b) => a.timestamp_ms - b.timestamp_ms);\n\n  const balances: MeteoraBalance[] = [];\n  let priorBalance: MeteoraBalance | undefined = undefined;\n\n  for (let i = 0; i < balanceChanges.length; i++) {\n    let currentTx = balanceChanges[i];\n    let nextTx = i + 1 < balanceChanges.length ? balanceChanges[i + 1] : null;\n    let newBalance: MeteoraBalance = {\n      tx_id_balance_start: currentTx.tx_id,\n      tx_id_balance_end: nextTx ? nextTx.tx_id : null,\n      timestamp_ms_balance_start: currentTx.timestamp_ms,\n      timestamp_ms_balance_end: nextTx\n        ? nextTx.timestamp_ms\n        : currentTx.timestamp_ms,\n      balance_age_ms: 0,\n      transaction_type: currentTx.transaction_type,\n      balance_change_usd: currentTx.balance_change_usd,\n      balance_usd: priorBalance\n        ? priorBalance.balance_usd + currentTx.balance_change_usd\n        : currentTx.balance_change_usd,\n    };\n\n    newBalance.balance_age_ms =\n      newBalance.timestamp_ms_balance_end -\n      newBalance.timestamp_ms_balance_start;\n    balances.push(newBalance);\n    priorBalance = newBalance;\n  }\n\n  return balances;\n}\n\nasync function getCurrentValue(\n  connection: Connection,\n  positionWithMintsAndLbPosition: MeteoraPositionWithTransactionMintsAndLbPosition,\n  balances: MeteoraBalance[],\n): Promise<MeteoraCurrentValueData> {\n  const lbPosition = positionWithMintsAndLbPosition.lbPosition;\n\n  if (lbPosition) {\n    const lastBalance = balances[balances.length - 1];\n\n    lastBalance.timestamp_ms_balance_end = new Date().getTime();\n    lastBalance.balance_age_ms =\n      lastBalance.timestamp_ms_balance_end -\n      lastBalance.timestamp_ms_balance_start;\n\n    const { mintX, mintY, reward1Mint, reward2Mint } =\n      positionWithMintsAndLbPosition.mints;\n\n    const [x, y, x_fees, y_fees, reward1, reward2] = await Promise.all([\n      lamportsToUsd(\n        connection,\n        mintX,\n        Number(lbPosition.positionData.totalXAmount),\n      ),\n      lamportsToUsd(\n        connection,\n        mintY,\n        Number(lbPosition.positionData.totalYAmount),\n      ),\n      lamportsToUsd(connection, mintX, Number(lbPosition.positionData.feeX)),\n      lamportsToUsd(connection, mintY, Number(lbPosition.positionData.feeY)),\n      !reward1Mint\n        ? 0\n        : lamportsToUsd(\n            connection,\n            reward1Mint,\n            Number(lbPosition.positionData.rewardOne),\n          ),\n      !reward2Mint\n        ? 0\n        : lamportsToUsd(\n            connection,\n            reward2Mint,\n            Number(lbPosition.positionData.rewardOne),\n          ),\n    ]);\n\n    return {\n      current_usd: x + y,\n      unclaimed_fees_usd: x_fees + y_fees,\n      unclaimed_rewards_usd: reward1 + reward2,\n    };\n  }\n\n  return {\n    current_usd: 0,\n    unclaimed_fees_usd: 0,\n    unclaimed_rewards_usd: 0,\n  };\n}\n\nfunction getBalanceSummary(\n  balances: MeteoraBalance[],\n  summaryData: MeteoraSummaryData,\n  currentValue: MeteoraCurrentValueData,\n): MeteoraBalanceSummaryData & MeteoraProfitData {\n  const { withdraws_usd, deposits_usd, claimed_fees_usd, claimed_rewards_usd } =\n    summaryData;\n  const { current_usd, unclaimed_fees_usd, unclaimed_rewards_usd } =\n    currentValue;\n  const balance_time_sum_product =\n    balances.length == 0\n      ? 0\n      : balances\n          .map((balance) => balance.balance_usd * balance.balance_age_ms)\n          .reduce((total, current) => total + current);\n\n  const total_time =\n    balances.length == 0\n      ? 0\n      : balances\n          .map((balance) => balance.balance_age_ms)\n          .reduce((total, current) => total + current);\n\n  const total_time_days = total_time / (1000 * 60 * 60 * 24);\n  const average_balance = balance_time_sum_product / total_time;\n  const balance_points = average_balance * total_time_days;\n  const fee_points = 1000 * (claimed_fees_usd + unclaimed_fees_usd);\n  const reward_points = 1000 * (claimed_rewards_usd + unclaimed_rewards_usd);\n  const total_points = balance_points + fee_points + reward_points;\n  const position_profit = withdraws_usd + current_usd - deposits_usd;\n  const total_profit =\n    position_profit +\n    claimed_fees_usd +\n    claimed_rewards_usd +\n    unclaimed_fees_usd +\n    unclaimed_rewards_usd;\n\n  return {\n    balance_time_sum_product,\n    total_time,\n    total_time_days,\n    average_balance,\n    position_profit,\n    total_profit,\n    balance_points,\n    fee_points,\n    reward_points,\n    total_points,\n  };\n}\n\nasync function finalizePositionData(\n  connection: Connection,\n  positionWithMintsAndLbPosition: MeteoraPositionWithTransactionMintsAndLbPosition,\n): Promise<MeteoraPositionProfit> {\n  const { deposits, withdraws } = positionWithMintsAndLbPosition;\n\n  const summaryData = getSummaryData(\n    positionWithMintsAndLbPosition,\n    deposits,\n    withdraws,\n  );\n  const balances = getBalances(deposits, withdraws);\n\n  const currentValue = await getCurrentValue(\n    connection,\n    positionWithMintsAndLbPosition,\n    balances,\n  );\n  const balanceSummary = getBalanceSummary(balances, summaryData, currentValue);\n\n  return {\n    ...positionWithMintsAndLbPosition,\n    ...summaryData,\n    ...currentValue,\n    balances,\n    ...balanceSummary,\n  };\n}\n\nexport async function getPositionProfit(\n  connection: Connection,\n  positionAddress: string,\n): Promise<MeteoraPositionProfit | undefined> {\n  const positionData = await getPositionData(positionAddress);\n\n  if (!positionData) {\n    return undefined;\n  }\n\n  const pairInfo = await getPairData(positionData.position.pair_address);\n\n  const pair_name = getPairName(pairInfo);\n  const mints = getPositionMints(pairInfo);\n\n  const positionWithoutCurrentValue: MeteoraPositionWithTransactionMintsAndLbPosition =\n    {\n      ...positionData,\n      pair_name,\n      mints,\n    };\n\n  return finalizePositionData(connection, positionWithoutCurrentValue);\n}\n\nfunction hasMeteoraProgram(tx: ParsedTransactionWithMeta) {\n  return tx.transaction.message.instructions\n    .map((instruction) => {\n      return instruction.programId.toBase58() == METEORA_PROGRAM_ID;\n    })\n    .reduce((total, current) => total || current);\n}\n\nfunction getPosition(instruction: PartiallyDecodedInstruction): {\n  positionAddress: string | undefined;\n  isClosed: boolean;\n} {\n  if (instruction.accounts.length !== 8) {\n    return { positionAddress: undefined, isClosed: false };\n  }\n\n  const accounts = instruction.accounts.map((account) => account.toBase58());\n\n  if (accounts[0] == accounts[3]) {\n    return { positionAddress: accounts[1], isClosed: false };\n  }\n\n  return { positionAddress: accounts[0], isClosed: true };\n}\n\nfunction getPositionAdressFromParsedTransaction(\n  tx: ParsedTransactionWithMeta,\n): { positionAddress: string; isClosed: boolean } | undefined {\n  if (!hasMeteoraProgram(tx)) {\n    return undefined;\n  }\n\n  const matches = tx.transaction.message.instructions\n    .map((i) => {\n      const instruction = i as PartiallyDecodedInstruction;\n\n      if (!instruction.accounts) {\n        return undefined;\n      }\n\n      return getPosition(instruction);\n    })\n    .filter((data) => data?.positionAddress);\n\n  if (matches.length == 0) {\n    return undefined;\n  }\n\n  return matches[0] as { positionAddress: string; isClosed: boolean };\n}\n\nasync function getMeteoraPositionAddressesFromParsedTransactions(\n  parsedTransactions: (ParsedTransactionWithMeta | null)[],\n  onPositionAddressFound?: (positionAddress: string) => any,\n  onClosedPositionFound?: (positionAddress: string) => any,\n): Promise<string[]> {\n  const positionAddresses: string[] = [];\n  const closedAddresses: string[] = [];\n\n  for (let i = 0; i < parsedTransactions.length; i++) {\n    const tx = parsedTransactions[i];\n\n    if (tx) {\n      const data = getPositionAdressFromParsedTransaction(tx);\n\n      // await delay(1000);\n      if (data) {\n        const newAddress = data.positionAddress;\n\n        if (!positionAddresses.includes(newAddress)) {\n          positionAddresses.push(newAddress);\n          if (onPositionAddressFound) {\n            onPositionAddressFound(newAddress);\n          }\n        }\n\n        if (data.isClosed && !closedAddresses.includes(newAddress)) {\n          closedAddresses.push(newAddress);\n          if (onClosedPositionFound) {\n            onClosedPositionFound(newAddress);\n          }\n        }\n      }\n    }\n  }\n\n  return positionAddresses;\n}\n\nexport async function getMeteoraProfitForAccountOrSignature(\n  connection: Connection,\n  accountOrSignature: string,\n  callbacks?: {\n    onSignaturesFound?: (signatureCount: number) => any;\n    onAllSignaturesFound?: () => any;\n    onPositionFound?: (positionAddress: string) => any;\n    onClosedPositionFound?: (positionAddress: string) => any;\n    onAllPositionsFound?: () => any;\n    onProfitAnalyzed?: (\n      addressCheckCount: number,\n      profit: MeteoraPositionProfit,\n    ) => any;\n    onDone?: () => any;\n  },\n): Promise<MeteoraPositionProfit[]> {\n  const allSignatures = [];\n  const allPositionAddresses: string[] = [];\n  const closedPositionAddresses: string[] = [];\n  const allProfits: MeteoraPositionProfit[] = [];\n  let signatureCount = 0;\n  let signaturesChecked = 0;\n  let positionsAnalyzed = 0;\n  let allSignaturesFound = false;\n\n  if (accountOrSignature.length == 44 || accountOrSignature.length == 43) {\n    await getAllSignaturesForAddress(\n      connection,\n      accountOrSignature,\n      async (signatures) => _processSignatures(signatures),\n      () => {\n        allSignaturesFound = true;\n        if (callbacks?.onAllSignaturesFound) {\n          callbacks.onAllSignaturesFound();\n        }\n        _checkCompletionCallbacks();\n      },\n    );\n  } else {\n    const positionAddressesFromSignature =\n      await getPositionAddressesFromSignature(connection, accountOrSignature);\n\n    await Promise.all(\n      positionAddressesFromSignature.map((positionAddress) => {\n        getAllSignaturesForAddress(\n          connection,\n          positionAddress,\n          async (signatures) => _processSignatures(signatures),\n        );\n      }),\n    );\n    allSignaturesFound = true;\n    if (callbacks?.onAllSignaturesFound) {\n      callbacks.onAllSignaturesFound();\n    }\n    _checkCompletionCallbacks();\n  }\n\n  function _processSignatures(signatures: ConfirmedSignatureInfo[]) {\n    const validSignatures = signatures.filter(\n      (signature) => signature.err == null,\n    );\n\n    if (validSignatures.length > 0) {\n      const newSignatures = validSignatures.map(\n        (signature) => signature.signature,\n      );\n\n      allSignatures.push(...newSignatures);\n\n      signatureCount += validSignatures.length;\n\n      if (callbacks?.onSignaturesFound) {\n        callbacks.onSignaturesFound(signatureCount);\n      }\n\n      _findPositionAddresses(newSignatures);\n    }\n  }\n\n  async function _findPositionAddresses(signatures: string[]) {\n    const parsedTransactions = await getParsedTransactions(\n      connection,\n      signatures,\n    );\n\n    getMeteoraPositionAddressesFromParsedTransactions(\n      parsedTransactions,\n      (positionAddress) => {\n        if (!allPositionAddresses.includes(positionAddress)) {\n          allPositionAddresses.push(positionAddress);\n          if (callbacks?.onPositionFound) {\n            callbacks.onPositionFound(positionAddress);\n          }\n          _getPositionProfit(positionAddress);\n        }\n      },\n      (positionAddress) => {\n        if (!closedPositionAddresses.includes(positionAddress)) {\n          closedPositionAddresses.push(positionAddress);\n        }\n      },\n    );\n    signaturesChecked += signatures.length;\n    _checkCompletionCallbacks();\n  }\n\n  async function _getPositionProfit(positionAddress: string) {\n    const profit = await getPositionProfit(connection, positionAddress);\n\n    positionsAnalyzed++;\n    if (profit) {\n      if (callbacks?.onProfitAnalyzed) {\n        callbacks.onProfitAnalyzed(positionsAnalyzed, profit);\n      }\n      allProfits.push(profit);\n    }\n    _checkCompletionCallbacks();\n  }\n\n  function _checkCompletionCallbacks() {\n    if (\n      allSignaturesFound &&\n      signaturesChecked == allSignatures.length &&\n      callbacks?.onAllPositionsFound\n    ) {\n      callbacks.onAllPositionsFound();\n    }\n    if (\n      allSignaturesFound &&\n      signaturesChecked == allSignatures.length &&\n      positionsAnalyzed == allPositionAddresses.length\n    ) {\n      // Set closed statuses\n      allProfits.forEach((profit) => {\n        profit.is_closed = closedPositionAddresses.includes(\n          profit.position.address,\n        );\n        if (profit.is_closed && profit.withdraws_count == 0) {\n          profit.errors.push(\"Closed position missing withdraws\");\n        }\n      });\n\n      if (callbacks?.onDone) {\n        callbacks.onDone();\n      }\n    }\n  }\n\n  return allProfits;\n}\n\nfunction getMeteoraPositionGroups(\n  positions: MeteoraPositionProfit[],\n): MeteoraPositionGroup[] {\n  const pairs: MeteoraPositionGroup[] = [];\n  const pairAddresses = positions.map(\n    (position) => position.position.pair_address,\n  );\n  const uniquePairAddresses = Array.from(new Set(pairAddresses));\n\n  uniquePairAddresses.forEach((pairAddress) => {\n    const pairPositions = positions.filter(\n      (position) => position.position.pair_address == pairAddress,\n    );\n    const positionsWithoutErrors = pairPositions.filter(\n      (position) => position.errors.length == 0,\n    );\n    const positionsWithErrors = pairPositions.filter(\n      (position) => position.errors.length > 0,\n    );\n\n    const balance_time_sum_product = total(\n      positionsWithoutErrors,\n      \"balance_time_sum_product\",\n    );\n    const total_time = total(positionsWithoutErrors, \"total_time\");\n\n    pairs.push({\n      name: pairPositions[0].pair_name,\n      pair_address: pairPositions[0].position.pair_address,\n      position_count: pairPositions.length,\n      positions: positionsWithoutErrors,\n      positionsWithErrors,\n      deposit_count: total(positionsWithoutErrors, \"deposit_count\"),\n      deposits_usd: total(positionsWithoutErrors, \"deposits_usd\"),\n      withdraws_count: total(positionsWithoutErrors, \"withdraws_count\"),\n      withdraws_usd: total(positionsWithoutErrors, \"withdraws_usd\"),\n      claimed_fees_usd: total(pairPositions, \"claimed_fees_usd\"),\n      claimed_rewards_usd: total(pairPositions, \"claimed_rewards_usd\"),\n      most_recent_deposit_withdraw: max(\n        pairPositions,\n        \"most_recent_deposit_withdraw\",\n      ),\n      balance_time_sum_product,\n      total_time,\n      total_time_days: total(positionsWithoutErrors, \"total_time_days\"),\n      average_balance: balance_time_sum_product / total_time,\n      current_usd: total(positionsWithoutErrors, \"current_usd\"),\n      unclaimed_fees_usd: total(positionsWithoutErrors, \"unclaimed_fees_usd\"),\n      unclaimed_rewards_usd: total(\n        positionsWithoutErrors,\n        \"unclaimed_rewards_usd\",\n      ),\n      position_profit: total(positionsWithoutErrors, \"position_profit\"),\n      total_profit: total(positionsWithoutErrors, \"total_profit\"),\n      fee_points: total(pairPositions, \"fee_points\"),\n      reward_points: total(pairPositions, \"reward_points\"),\n      balance_points: total(positionsWithoutErrors, \"balance_points\"),\n      total_points: total(pairPositions, \"total_points\"),\n    });\n  });\n\n  return pairs;\n}\n\nexport function getMeteoraPairGroups(\n  positions: MeteoraPositionProfit[],\n): MeteoraPairGroup[] {\n  const pairPositions = getMeteoraPositionGroups(positions);\n  const groups: MeteoraPairGroup[] = [];\n  const groupIds = pairPositions.map((pairRollup) => pairRollup.name.group_id);\n  const uniqueGroupIds = Array.from(new Set(groupIds));\n\n  uniqueGroupIds.forEach((groupId) => {\n    const pairIdRollups = pairPositions.filter(\n      (pairPositions) => pairPositions.name.group_id == groupId,\n    );\n\n    const balance_time_sum_product = total(\n      pairIdRollups,\n      \"balance_time_sum_product\",\n    );\n    const total_time = total(pairIdRollups, \"total_time\");\n\n    groups.push({\n      name: pairIdRollups[0].name,\n      position_groups: pairIdRollups,\n      pair_count: pairIdRollups.length,\n      position_count: total(pairIdRollups, \"position_count\"),\n      deposit_count: total(pairIdRollups, \"deposit_count\"),\n      deposits_usd: total(pairIdRollups, \"deposits_usd\"),\n      withdraws_count: total(pairIdRollups, \"withdraws_count\"),\n      withdraws_usd: total(pairIdRollups, \"withdraws_usd\"),\n      claimed_fees_usd: total(pairIdRollups, \"claimed_fees_usd\"),\n      claimed_rewards_usd: total(pairIdRollups, \"claimed_rewards_usd\"),\n      most_recent_deposit_withdraw: max(\n        pairIdRollups,\n        \"most_recent_deposit_withdraw\",\n      ),\n      balance_time_sum_product,\n      total_time,\n      total_time_days: total(pairIdRollups, \"total_time_days\"),\n      average_balance: balance_time_sum_product / total_time,\n      current_usd: total(pairIdRollups, \"current_usd\"),\n      unclaimed_fees_usd: total(pairIdRollups, \"unclaimed_fees_usd\"),\n      unclaimed_rewards_usd: total(pairIdRollups, \"unclaimed_rewards_usd\"),\n      position_profit: total(pairIdRollups, \"position_profit\"),\n      total_profit: total(pairIdRollups, \"total_profit\"),\n      fee_points: total(pairIdRollups, \"fee_points\"),\n      reward_points: total(pairIdRollups, \"reward_points\"),\n      balance_points: total(pairIdRollups, \"balance_points\"),\n      total_points: total(pairIdRollups, \"total_points\"),\n    });\n  });\n\n  return groups;\n}\n\nexport function getMeteoraUserProfit(\n  positions: MeteoraPositionProfit[],\n): MeteoraUserProfit {\n  const pair_groups = getMeteoraPairGroups(positions);\n\n  const balance_time_sum_product = total(\n    pair_groups,\n    \"balance_time_sum_product\",\n  );\n  const total_time = total(pair_groups, \"total_time\");\n\n  return {\n    pair_groups,\n    pair_group_count: total(pair_groups, \"position_groups\"),\n    pair_count: total(pair_groups, \"pair_count\"),\n    position_count: total(pair_groups, \"position_count\"),\n    deposit_count: total(pair_groups, \"deposit_count\"),\n    deposits_usd: total(pair_groups, \"deposits_usd\"),\n    withdraws_count: total(pair_groups, \"withdraws_count\"),\n    withdraws_usd: total(pair_groups, \"withdraws_usd\"),\n    claimed_fees_usd: total(pair_groups, \"claimed_fees_usd\"),\n    claimed_rewards_usd: total(pair_groups, \"claimed_rewards_usd\"),\n    most_recent_deposit_withdraw: max(\n      pair_groups,\n      \"most_recent_deposit_withdraw\",\n    ),\n    balance_time_sum_product,\n    total_time,\n    total_time_days: total(pair_groups, \"total_time_days\"),\n    average_balance: balance_time_sum_product / total_time,\n    current_usd: total(pair_groups, \"current_usd\"),\n    unclaimed_fees_usd: total(pair_groups, \"unclaimed_fees_usd\"),\n    unclaimed_rewards_usd: total(pair_groups, \"unclaimed_rewards_usd\"),\n    position_profit: total(pair_groups, \"position_profit\"),\n    total_profit: total(pair_groups, \"total_profit\"),\n    fee_points: total(pair_groups, \"fee_points\"),\n    reward_points: total(pair_groups, \"reward_points\"),\n    balance_points: total(pair_groups, \"balance_points\"),\n    total_points: total(pair_groups, \"total_points\"),\n  };\n}\n\nexport function profitSort<\n  T extends MeteoraPairGroup | MeteoraPositionGroup | MeteoraPositionProfit,\n>(profits: T[], descending = true) {\n  return profits.sort((a, b) =>\n    descending\n      ? b.total_profit - a.total_profit\n      : a.total_profit - b.total_profit,\n  );\n}\n\nexport function sortProfitsByRecentGroupTransactions(\n  profits: MeteoraPositionProfit[],\n) {\n  const groupTimestamps: Map<string, number> = new Map();\n\n  profits.forEach((profit) => {\n    const groupId = profit.pair_name.group_id;\n    const groupTime = groupTimestamps.get(groupId);\n\n    if (!groupTime) {\n      groupTimestamps.set(groupId, profit.most_recent_deposit_withdraw);\n    } else {\n      if (profit.most_recent_deposit_withdraw > groupTime) {\n        groupTimestamps.set(groupId, profit.most_recent_deposit_withdraw);\n      }\n    }\n  });\n\n  return profits.sort(\n    (a, b) =>\n      groupTimestamps.get(b.pair_name.group_id)! -\n        groupTimestamps.get(a.pair_name.group_id)! ||\n      b.most_recent_deposit_withdraw - a.most_recent_deposit_withdraw,\n  );\n}\n","import {\n  SortDescriptor,\n  Table,\n  TableBody,\n  TableCell,\n  TableColumn,\n  TableHeader,\n  TableRow,\n} from \"@nextui-org/react\";\nimport { useState } from \"react\";\n\nimport { PositionLoadingState } from \"@/pages\";\nimport { MeteoraPairGroup } from \"@/services/profit-downloader\";\n\ninterface DataColumns {\n  name: {\n    group_name: string;\n    group_id: string;\n  };\n  pair_count: number;\n  position_count: number;\n  claimed_fees_usd: number;\n  claimed_rewards_usd: number;\n  deposits_usd: number;\n  withdraws_usd: number;\n  total_profit: number;\n  average_balance: number;\n}\n\nfunction formatTotalRow(\n  currentRow: MeteoraPairGroup | DataColumns,\n  firstLast?: \"first\" | \"last\",\n) {\n  return currentRow.name.group_name != \"Total\"\n    ? \"\"\n    : !firstLast\n      ? \"font-bold text-lg bg-slate-500 text-white\"\n      : firstLast == \"first\"\n        ? \"font-bold text-lg bg-slate-500 text-white rounded-l-lg\"\n        : \"font-bold text-lg bg-slate-500 text-white rounded-r-lg\";\n}\n\nexport const UserPositionList = (props: {\n  positionLoadingState: PositionLoadingState;\n}) => {\n  const [sortDescriptor, setSortDescriptor] = useState({\n    column: \"total_profit\",\n    direction: \"descending\",\n  } as SortDescriptor);\n\n  if (props.positionLoadingState.userProfit.pair_groups.length == 0) {\n    return <></>;\n  }\n\n  const totalData = {\n    name: {\n      group_name: \"Total\",\n      group_id: \"Total\",\n    },\n    pair_count: props.positionLoadingState.userProfit.pair_count,\n    position_count: props.positionLoadingState.userProfit.position_count,\n    deposits_usd: props.positionLoadingState.userProfit.deposits_usd,\n    withdraws_usd: props.positionLoadingState.userProfit.withdraws_usd,\n    claimed_fees_usd: props.positionLoadingState.userProfit.claimed_fees_usd,\n    claimed_rewards_usd:\n      props.positionLoadingState.userProfit.claimed_rewards_usd,\n    average_balance:\n      props.positionLoadingState.userProfit.balance_time_sum_product /\n      props.positionLoadingState.userProfit.total_time,\n    total_profit: props.positionLoadingState.userProfit.total_profit,\n  };\n\n  function sortGroups(sortDescriptor: SortDescriptor) {\n    const data = props.positionLoadingState.userProfit.pair_groups.sort(\n      (a, b) => {\n        switch (sortDescriptor.column) {\n          case \"fees_rewards\":\n            return sortDescriptor.direction == \"descending\"\n              ? b.claimed_fees_usd +\n                  b.claimed_rewards_usd -\n                  a.claimed_fees_usd -\n                  a.claimed_rewards_usd\n              : a.claimed_fees_usd +\n                  a.claimed_rewards_usd -\n                  b.claimed_fees_usd -\n                  b.claimed_rewards_usd;\n\n          case \"avg_balance_profit_percent\":\n            const a_percent = a.total_profit / a.average_balance;\n            const b_percent = b.total_profit / b.average_balance;\n\n            return sortDescriptor.direction == \"descending\"\n              ? b_percent - a_percent\n              : a_percent - b_percent;\n\n          case \"deposits_profit_percent\":\n            const a_dpercent = a.total_profit / a.deposits_usd;\n            const b_dpercent = b.total_profit / b.deposits_usd;\n\n            return sortDescriptor.direction == \"descending\"\n              ? b_dpercent - a_dpercent\n              : a_dpercent - b_dpercent;\n\n          case \"position_count\":\n          case \"total_profit\":\n          case \"average_balance\":\n          case \"deposits_usd\":\n          case \"withdraws_usd\":\n            return sortDescriptor.direction == \"descending\"\n              ? b[sortDescriptor.column] - a[sortDescriptor.column]\n              : a[sortDescriptor.column] - b[sortDescriptor.column];\n\n          case \"name\":\n            return sortDescriptor.direction == \"ascending\"\n              ? a.name.group_name.localeCompare(b.name.group_name)\n              : b.name.group_name.localeCompare(a.name.group_name);\n\n          default:\n            return 0;\n        }\n      },\n    ) as (MeteoraPairGroup | DataColumns)[];\n\n    return data;\n  }\n\n  return (\n    <div className=\"w-full pl-4 pr-4\">\n      <Table\n        sortDescriptor={sortDescriptor}\n        onSortChange={(descriptor) => setSortDescriptor(descriptor)}\n      >\n        <TableHeader>\n          <TableColumn key=\"name\" allowsSorting>\n            Pair\n          </TableColumn>\n          <TableColumn key=\"pair_count\" allowsSorting>\n            # of <br />\n            Markets\n          </TableColumn>\n          <TableColumn key=\"position_count\" allowsSorting>\n            # of <br />\n            Positions\n          </TableColumn>\n          <TableColumn key=\"fees_rewards\" allowsSorting>\n            Fees & <br />\n            Rewards\n          </TableColumn>\n          <TableColumn key=\"deposits_usd\" allowsSorting>\n            Total <br />\n            Deposits\n          </TableColumn>\n          <TableColumn key=\"withdraws_usd\" allowsSorting>\n            Total <br />\n            Withdrawals\n          </TableColumn>\n          <TableColumn key=\"total_profit\" allowsSorting>\n            Total <br />\n            Profit\n          </TableColumn>\n          <TableColumn key=\"average_balance\" allowsSorting>\n            Average <br />\n            Balance\n          </TableColumn>\n          <TableColumn key=\"avg_balance_profit_percent\" allowsSorting>\n            Average Balance <br />\n            Profit %\n          </TableColumn>\n          <TableColumn key=\"deposits_profit_percent\" allowsSorting>\n            Deposits <br />\n            Profit %\n          </TableColumn>\n        </TableHeader>\n        <TableBody items={[...sortGroups(sortDescriptor), totalData]}>\n          {(pairGroup) => (\n            <TableRow key={pairGroup.name.group_id}>\n              <TableCell className={formatTotalRow(pairGroup, \"first\")}>\n                {pairGroup.name.group_name}\n              </TableCell>\n              <TableCell className={formatTotalRow(pairGroup)}>\n                {pairGroup.pair_count.toLocaleString(\"en-US\")}\n              </TableCell>\n              <TableCell className={formatTotalRow(pairGroup)}>\n                {pairGroup.position_count.toLocaleString(\"en-US\")}\n              </TableCell>\n              <TableCell className={formatTotalRow(pairGroup)}>\n                {(\n                  pairGroup.claimed_fees_usd + pairGroup.claimed_rewards_usd\n                ).toLocaleString(\"en-US\", {\n                  style: \"currency\",\n                  currency: \"USD\",\n                  minimumFractionDigits: 2,\n                  maximumFractionDigits: 2,\n                })}\n              </TableCell>\n              <TableCell className={formatTotalRow(pairGroup)}>\n                {pairGroup.deposits_usd.toLocaleString(\"en-US\", {\n                  style: \"currency\",\n                  currency: \"USD\",\n                  minimumFractionDigits: 2,\n                  maximumFractionDigits: 2,\n                })}\n              </TableCell>\n              <TableCell className={formatTotalRow(pairGroup)}>\n                {pairGroup.withdraws_usd.toLocaleString(\"en-US\", {\n                  style: \"currency\",\n                  currency: \"USD\",\n                  minimumFractionDigits: 2,\n                  maximumFractionDigits: 2,\n                })}\n              </TableCell>\n              <TableCell className={formatTotalRow(pairGroup)}>\n                {pairGroup.total_profit.toLocaleString(\"en-US\", {\n                  style: \"currency\",\n                  currency: \"USD\",\n                  minimumFractionDigits: 2,\n                  maximumFractionDigits: 2,\n                })}\n              </TableCell>\n              <TableCell className={formatTotalRow(pairGroup)}>\n                {pairGroup.average_balance.toLocaleString(\"en-US\", {\n                  style: \"currency\",\n                  currency: \"USD\",\n                  minimumFractionDigits: 2,\n                  maximumFractionDigits: 2,\n                })}\n              </TableCell>\n              <TableCell className={formatTotalRow(pairGroup)}>\n                {(\n                  pairGroup.total_profit / pairGroup.average_balance\n                ).toLocaleString(\"en-US\", {\n                  style: \"percent\",\n                  minimumFractionDigits: 2,\n                  maximumFractionDigits: 2,\n                })}\n              </TableCell>\n              <TableCell className={formatTotalRow(pairGroup, \"last\")}>\n                {(\n                  pairGroup.total_profit / pairGroup.deposits_usd\n                ).toLocaleString(\"en-US\", {\n                  style: \"percent\",\n                  minimumFractionDigits: 2,\n                  maximumFractionDigits: 2,\n                })}\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </div>\n  );\n};\n","import { Spinner } from \"@nextui-org/react\";\n\nexport const LoadingItem = (props: {\n  title: string;\n  value: number | string;\n  loading?: boolean;\n}) => {\n  return (\n    <div className=\"flex columns-2 w-full\">\n      <div className=\"text-nowrap\">\n        {props.loading ? (\n          <Spinner size=\"sm\" />\n        ) : props.loading === false ? (\n          \"✅\"\n        ) : (\n          \"\"\n        )}\n        &nbsp;\n        <b>{props.title}: &nbsp;</b>\n      </div>\n      <div className=\"ml-auto\">\n        {typeof props.value == \"number\"\n          ? props.value.toLocaleString(\"en-us\", {\n              minimumFractionDigits: 0,\n              maximumFractionDigits: 0,\n            })\n          : props.value}\n      </div>\n    </div>\n  );\n};\n","import { Button } from \"@nextui-org/react\";\n\nimport { DownloadIcon } from \"./icons\";\n\nimport { MeteoraPositionProfit } from \"@/services/profit-downloader\";\nimport { downloadStringToFile } from \"@/services/util\";\n\nexport const MissingTransactionsDownloadButton = (props: {\n  positionAddresses: string[];\n  profits: MeteoraPositionProfit[];\n}) => {\n  if (props.profits.length == 0) {\n    return <></>;\n  }\n\n  const identifiedPositionAddresses = props.profits.map(\n    (position) => position.position.address,\n  );\n  const missingTransactions = props.positionAddresses.filter(\n    (positionAddress) => !identifiedPositionAddresses.includes(positionAddress),\n  );\n\n  if (missingTransactions.length == 0) {\n    return <></>;\n  }\n\n  const onClick = () => {\n    downloadStringToFile(\n      \"missing-transactions.csv\",\n      \"tx_id\\n\" + missingTransactions.join(\"\\n\"),\n    );\n  };\n\n  return (\n    <Button\n      aria-label=\"Download Missing Transactions\"\n      className=\"m-4\"\n      color=\"primary\"\n      startContent={<DownloadIcon />}\n      onClick={() => onClick()}\n    >\n      Download Missing Transactions\n    </Button>\n  );\n};\n","import { Button } from \"@nextui-org/react\";\n\nimport { DownloadIcon } from \"./icons\";\n\nimport {\n  MeteoraPositionProfit,\n  sortProfitsByRecentGroupTransactions,\n} from \"@/services/profit-downloader\";\nimport { downloadObjArrayAsCsv } from \"@/services/util\";\n\nexport const AllPositionsDownloadButton = (props: {\n  profits: MeteoraPositionProfit[];\n}) => {\n  if (props.profits.length == 0) {\n    return <></>;\n  }\n\n  const onClick = () => {\n    const sortedProfits = sortProfitsByRecentGroupTransactions(props.profits);\n    const profitData = sortedProfits\n      .map((profit) => {\n        const {\n          position,\n          pair_name,\n          deposits,\n          withdraws,\n          deposits_usd,\n          withdraws_usd,\n          average_balance,\n          claimed_fees_usd,\n          claimed_rewards_usd,\n          total_time_days,\n          fee_points,\n          reward_points,\n          balance_points,\n          position_profit,\n          total_profit,\n          errors,\n          total_time,\n          balance_time_sum_product,\n        } = profit;\n\n        const firstDeposit =\n          deposits.length == 0\n            ? null\n            : deposits.sort(\n                (a, b) => a.onchain_timestamp - b.onchain_timestamp,\n              )[0];\n\n        const lastWithdraw =\n          withdraws.length == 0\n            ? null\n            : withdraws.sort(\n                (a, b) => a.onchain_timestamp - b.onchain_timestamp,\n              )[0];\n\n        return {\n          position_address: position.address,\n          pair_address: position.pair_address,\n          pair_name: pair_name.name,\n          pair_group: pair_name.group_name,\n          errors: errors.join(\" | \"),\n          first_deposit_tx_id: firstDeposit ? firstDeposit.tx_id : null,\n          first_deposit_onchain_timestamp: firstDeposit\n            ? firstDeposit.onchain_timestamp\n            : (null as number | string | null),\n          last_withdraw_tx_id: lastWithdraw ? lastWithdraw.tx_id : null,\n          last_withdraw_onchain_timestamp: lastWithdraw\n            ? lastWithdraw.onchain_timestamp\n            : (null as number | string | null),\n          deposits_usd,\n          withdraws_usd,\n          average_balance,\n          claimed_fees_usd,\n          claimed_rewards_usd,\n          total_time_days,\n          fee_points,\n          reward_points,\n          balance_points,\n          position_profit,\n          total_profit,\n          total_time,\n          balance_time_sum_product,\n        };\n      })\n      .map((data) => {\n        data.first_deposit_onchain_timestamp =\n          data.first_deposit_onchain_timestamp == null\n            ? null\n            : new Date(\n                Number(data.first_deposit_onchain_timestamp) * 1000,\n              ).toISOString();\n        data.last_withdraw_onchain_timestamp =\n          data.last_withdraw_onchain_timestamp == null\n            ? null\n            : new Date(\n                Number(data.last_withdraw_onchain_timestamp) * 1000,\n              ).toISOString();\n\n        return data;\n      });\n\n    downloadObjArrayAsCsv(\"dlmm-all-position-summary.csv\", profitData);\n  };\n\n  return (\n    <Button\n      aria-label=\"Download All Positions\"\n      className=\"m-4\"\n      color=\"primary\"\n      startContent={<DownloadIcon />}\n      onClick={() => onClick()}\n    >\n      Download All Positions\n    </Button>\n  );\n};\n","import { Button } from \"@nextui-org/react\";\n\nimport { DownloadIcon } from \"./icons\";\n\nimport {\n  MeteoraPositionProfit,\n  sortProfitsByRecentGroupTransactions as sortProfitsByMostRecentTransactions,\n} from \"@/services/profit-downloader\";\nimport { downloadObjArrayAsCsv } from \"@/services/util\";\n\nexport const ValidPositionsDownloadButton = (props: {\n  profits: MeteoraPositionProfit[];\n}) => {\n  const validProfitData = props.profits.filter(\n    (profit) => profit.errors.length == 0,\n  );\n\n  if (\n    validProfitData.length == 0 ||\n    validProfitData.length == props.profits.length\n  ) {\n    return <></>;\n  }\n\n  const onClick = () => {\n    const sortedProfits = sortProfitsByMostRecentTransactions(validProfitData);\n    const profitData = sortedProfits\n      .map((profit) => {\n        const {\n          position,\n          pair_name,\n          deposits,\n          withdraws,\n          deposits_usd,\n          withdraws_usd,\n          average_balance,\n          claimed_fees_usd,\n          claimed_rewards_usd,\n          total_time_days,\n          fee_points,\n          reward_points,\n          balance_points,\n          position_profit,\n          total_profit,\n          errors,\n          total_time,\n          balance_time_sum_product,\n        } = profit;\n\n        const firstDeposit =\n          deposits.length == 0\n            ? null\n            : deposits.sort(\n                (a, b) => a.onchain_timestamp - b.onchain_timestamp,\n              )[0];\n\n        const lastWithdraw =\n          withdraws.length == 0\n            ? null\n            : withdraws.sort(\n                (a, b) => a.onchain_timestamp - b.onchain_timestamp,\n              )[0];\n\n        return {\n          position_address: position.address,\n          pair_address: position.pair_address,\n          pair_name: pair_name.name,\n          pair_group: pair_name.group_name,\n          errors: errors.join(\" | \"),\n          first_deposit_tx_id: firstDeposit ? firstDeposit.tx_id : null,\n          first_deposit_onchain_timestamp: firstDeposit\n            ? firstDeposit.onchain_timestamp\n            : (null as number | string | null),\n          last_withdraw_tx_id: lastWithdraw ? lastWithdraw.tx_id : null,\n          last_withdraw_onchain_timestamp: lastWithdraw\n            ? lastWithdraw.onchain_timestamp\n            : (null as number | string | null),\n          deposits_usd,\n          withdraws_usd,\n          average_balance,\n          claimed_fees_usd,\n          claimed_rewards_usd,\n          total_time_days,\n          fee_points,\n          reward_points,\n          balance_points,\n          position_profit,\n          total_profit,\n          total_time,\n          balance_time_sum_product,\n        };\n      })\n      .map((data) => {\n        data.first_deposit_onchain_timestamp =\n          data.first_deposit_onchain_timestamp == null\n            ? null\n            : new Date(\n                Number(data.first_deposit_onchain_timestamp) * 1000,\n              ).toISOString();\n        data.last_withdraw_onchain_timestamp =\n          data.last_withdraw_onchain_timestamp == null\n            ? null\n            : new Date(\n                Number(data.last_withdraw_onchain_timestamp) * 1000,\n              ).toISOString();\n\n        return data;\n      });\n\n    downloadObjArrayAsCsv(\"dlmm-valid-position-summary.csv\", profitData);\n  };\n\n  return (\n    <Button\n      aria-label=\"Download Valid Positions\"\n      className=\"m-4\"\n      color=\"primary\"\n      startContent={<DownloadIcon />}\n      onClick={() => onClick()}\n    >\n      Download Valid Positions\n    </Button>\n  );\n};\n","import { Card, CardBody, Progress } from \"@nextui-org/react\";\n\nimport { LoadingItem } from \"./loading-status-item\";\nimport { MissingTransactionsDownloadButton } from \"./missing-transactions-download-button\";\nimport { AllPositionsDownloadButton } from \"./all-positions-download-button\";\nimport { ValidPositionsDownloadButton } from \"./valid-positions-download-button\";\n\nimport { PositionLoadingState } from \"@/pages\";\n\nexport const LoadingSummary = (props: {\n  loading: boolean;\n  positionLoadingState: PositionLoadingState;\n}) => {\n  return (\n    <div className=\"flex w-full\">\n      <Card className=\"m-4 h-fit w-1/2\">\n        <CardBody>\n          <LoadingItem\n            title=\"Time Elapsed\"\n            value={props.positionLoadingState.durationString}\n          />\n          {props.loading &&\n          props.positionLoadingState.eta &&\n          props.positionLoadingState.eta != \"\" ? (\n            <LoadingItem\n              title=\"Estimated time to complete\"\n              value={props.positionLoadingState.eta}\n            />\n          ) : (\n            \"\"\n          )}\n          <LoadingItem\n            loading={!props.positionLoadingState.allSignaturesFound}\n            title=\"# of Transactions Found\"\n            value={props.positionLoadingState.signatureCount}\n          />\n          <LoadingItem\n            loading={!props.positionLoadingState.allPositionsFound}\n            title=\"# of Positions Found\"\n            value={props.positionLoadingState.positionAddresses.length}\n          />\n          <LoadingItem\n            loading={props.loading}\n            title=\"# of Positions w/ Errors\"\n            value={\n              props.positionLoadingState.profits.filter(\n                (profit) => profit.errors.length > 0,\n              ).length\n            }\n          />\n          <LoadingItem\n            loading={props.loading}\n            title=\"# of Positions Analyzed\"\n            value={props.positionLoadingState.profits.length}\n          />\n          {!props.positionLoadingState.done ? (\n            <Progress\n              className=\"mt-4\"\n              isIndeterminate={!props.positionLoadingState.allPositionsFound}\n              showValueLabel={props.positionLoadingState.allPositionsFound}\n              value={props.positionLoadingState.positionProgress}\n            />\n          ) : (\n            <></>\n          )}\n        </CardBody>\n      </Card>\n      <div className=\"flex w-full justify-end items-end\">\n        <MissingTransactionsDownloadButton\n          positionAddresses={props.positionLoadingState.positionAddresses}\n          profits={props.positionLoadingState.profits}\n        />\n        <ValidPositionsDownloadButton\n          profits={props.positionLoadingState.profits}\n        />\n        <AllPositionsDownloadButton\n          profits={props.positionLoadingState.profits}\n        />\n      </div>\n    </div>\n  );\n};\n","import { UserPositionList } from \"./user-position-list\";\nimport { LoadingSummary } from \"./loading-summary\";\n\nimport { PositionLoadingState } from \"@/pages\";\n\nexport const ProfitDisplay = (props: {\n  loading: boolean;\n  positionLoadingState: PositionLoadingState;\n}) => {\n  if (props.positionLoadingState.startTime == 0) {\n    return <></>;\n  }\n\n  return (\n    <div>\n      <div className=\"w-full\">\n        <LoadingSummary\n          loading={props.loading}\n          positionLoadingState={props.positionLoadingState}\n        />\n      </div>\n      <div className=\"w-full\">\n        <UserPositionList positionLoadingState={props.positionLoadingState} />\n      </div>\n    </div>\n  );\n};\n","import { Button, Input } from \"@nextui-org/react\";\nimport { ChangeEvent } from \"react\";\n\nimport { AppStateInterface } from \"@/pages/_app\";\n\nexport const WalletForm = (props: {\n  loading: boolean;\n  appState: AppStateInterface;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => any;\n  loadTransactions: () => any;\n}) => {\n  if (props.loading) {\n    return <></>;\n  }\n\n  return (\n    <div className=\"flex w-1/2 flex-col gap-4\">\n      <div className=\"flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4\">\n        <Input\n          disabled={props.loading}\n          label=\"Wallet Address or Transaction Signature\"\n          type=\"text\"\n          onChange={(event) => props.onChange(event)}\n        />\n        <Button\n          aria-label=\"Go\"\n          color=\"primary\"\n          disabled={props.loading || !props.appState.connection}\n          onClick={props.loadTransactions}\n        >\n          Go\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import { useContext, useState } from \"react\";\n\nimport { AppState } from \"./_app\";\n\nimport { title, subtitle } from \"@/components/primitives\";\nimport DefaultLayout from \"@/layouts/default\";\nimport {\n  MeteoraPositionProfit,\n  MeteoraUserProfit,\n  getMeteoraUserProfit,\n  profitSort,\n} from \"@/services/profit-downloader\";\nimport { getMeteoraProfitForAccountOrSignature } from \"@/services/profit-downloader\";\nimport { ProfitDisplay } from \"@/components/profit-display\";\nimport { WalletForm } from \"@/components/wallet-form\";\nimport { getDurationString } from \"@/services/util\";\n\nexport interface PositionLoadingState {\n  startTime: number;\n  durationString: string;\n  durationHandler?: NodeJS.Timeout;\n  signatureCount: number;\n  allSignaturesFound: boolean;\n  allPositionsFound: boolean;\n  addressCheckCount: number;\n  positionAddresses: string[];\n  closedPositionAddresses: string[];\n  profits: MeteoraPositionProfit[];\n  userProfit: MeteoraUserProfit;\n  checkPoints: {\n    pctComplete: number;\n    time: number;\n  }[];\n  positionProgress: number;\n  eta: string;\n  done: boolean;\n}\n\nexport default function IndexPage() {\n  const defaultUserProfit: MeteoraUserProfit = {\n    pair_groups: [],\n    pair_group_count: 0,\n    pair_count: 0,\n    position_count: 0,\n    deposit_count: 0,\n    deposits_usd: 0,\n    withdraws_count: 0,\n    withdraws_usd: 0,\n    claimed_fees_usd: 0,\n    claimed_rewards_usd: 0,\n    most_recent_deposit_withdraw: 0,\n    current_usd: 0,\n    unclaimed_fees_usd: 0,\n    unclaimed_rewards_usd: 0,\n    balance_time_sum_product: 0,\n    total_time: 0,\n    total_time_days: 0,\n    average_balance: 0,\n    position_profit: 0,\n    total_profit: 0,\n    fee_points: 0,\n    reward_points: 0,\n    balance_points: 0,\n    total_points: 0,\n  };\n\n  const defaultState: PositionLoadingState = {\n    startTime: 0,\n    durationString: \"\",\n    signatureCount: 0,\n    allSignaturesFound: false,\n    allPositionsFound: false,\n    addressCheckCount: 0,\n    profits: [],\n    userProfit: defaultUserProfit,\n    checkPoints: [],\n    positionProgress: -1,\n    eta: \"\",\n    positionAddresses: [],\n    closedPositionAddresses: [],\n    done: false,\n  };\n\n  const appState = useContext(AppState);\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [positionLoadingState, setPositionLoadingState] =\n    useState(defaultState);\n\n  function updatePositionLoadingState(currentState: PositionLoadingState) {\n    currentState.durationString = getDurationString(\n      new Date().getTime() - currentState.startTime,\n    );\n\n    if (!currentState.allPositionsFound) {\n      return currentState;\n    }\n\n    const { addressCheckCount, positionAddresses, checkPoints } = currentState;\n\n    const pctComplete = addressCheckCount / positionAddresses.length;\n\n    currentState.positionProgress = Math.round(100 * pctComplete);\n\n    const lastTime =\n      checkPoints.length == 0\n        ? new Date().getTime()\n        : checkPoints[checkPoints.length - 1].time;\n\n    if (checkPoints.length == 0 || new Date().getTime() - lastTime > 500) {\n      checkPoints.push({\n        pctComplete,\n        time: new Date().getTime(),\n      });\n    }\n\n    if (pctComplete < 0.1 || checkPoints.length < 60) {\n      currentState.eta = \"Calculating...\";\n\n      return currentState;\n    }\n\n    const first = checkPoints[0];\n    const last = checkPoints[checkPoints.length - 1];\n    const duration = last.time - first.time;\n    const pctProgress = last.pctComplete - first.pctComplete;\n    const estimate = duration / pctProgress - duration;\n\n    currentState.eta = getDurationString(estimate);\n    currentState.positionProgress = Math.round(100 * last.pctComplete);\n\n    return currentState;\n  }\n\n  async function loadTransactions() {\n    if (appState.connection) {\n      setLoading(true);\n      setPositionLoadingState(() => {\n        return { ...defaultState, startTime: new Date().getTime() };\n      });\n      getMeteoraProfitForAccountOrSignature(\n        appState.connection,\n        walletAddress,\n        {\n          onSignaturesFound(signatureCount) {\n            setPositionLoadingState((previousState) => {\n              return updatePositionLoadingState({\n                ...previousState,\n                signatureCount,\n              });\n            });\n          },\n          onAllSignaturesFound() {\n            setPositionLoadingState((previousState) => {\n              return updatePositionLoadingState({\n                ...previousState,\n                allSignaturesFound: true,\n              });\n            });\n          },\n          onPositionFound(positionAddress) {\n            setPositionLoadingState((previousState) => {\n              if (!previousState.positionAddresses.includes(positionAddress)) {\n                previousState.positionAddresses.push(positionAddress);\n\n                return updatePositionLoadingState(previousState);\n              }\n\n              return previousState;\n            });\n          },\n          onClosedPositionFound(positionAddress) {\n            setPositionLoadingState((previousState) => {\n              if (\n                !previousState.closedPositionAddresses.includes(positionAddress)\n              ) {\n                previousState.closedPositionAddresses.push(positionAddress);\n\n                return updatePositionLoadingState(previousState);\n              }\n\n              return previousState;\n            });\n          },\n          onAllPositionsFound() {\n            setPositionLoadingState((previousState) => {\n              return updatePositionLoadingState({\n                ...previousState,\n                allPositionsFound: true,\n              });\n            });\n          },\n          onProfitAnalyzed(addressCheckCount, profit) {\n            setPositionLoadingState((previousState) => {\n              const profits = profitSort([...previousState.profits, profit]);\n              const userProfit = getMeteoraUserProfit(profits);\n\n              userProfit.pair_groups = profitSort(userProfit.pair_groups);\n\n              return updatePositionLoadingState({\n                ...previousState,\n                addressCheckCount,\n                profits,\n                userProfit,\n              });\n            });\n          },\n          onDone() {\n            setLoading(false);\n            setPositionLoadingState((previousState) => {\n              return {\n                ...previousState,\n                done: true,\n              };\n            });\n          },\n        },\n      );\n    }\n  }\n\n  return (\n    <DefaultLayout>\n      <section className=\"flex flex-col items-center justify-center gap-4 py-8 md:py-10\">\n        <div className=\"inline-block max-w-lg text-center justify-center\">\n          <h1 className={title()}>Meteora Profit Analysis</h1>\n          <h4 className={subtitle({ class: \"mt-4\" })}>\n            Find out How Much You&rsquo;re Printing\n          </h4>\n        </div>\n\n        <div className=\"flex gap-3\" />\n\n        <WalletForm\n          appState={appState}\n          loadTransactions={loadTransactions}\n          loading={loading}\n          onChange={(event) => setWalletAddress(event.target.value)}\n        />\n        <div className=\"w-full\">\n          <ProfitDisplay\n            loading={loading}\n            positionLoadingState={positionLoadingState}\n          />\n        </div>\n      </section>\n    </DefaultLayout>\n  );\n}\n"],"names":["window","__NEXT_P","push","__webpack_require__","JupiterTokenListTag","delay","ms","Promise","setTimeout","resolve","exponentialRetryDelay","fn","retries","maxRetries","err","toString","concat","ThrottledCachedRequest","get","_len","arguments","length","args","_key","argsStr","_stringifyArgs","_queueRequest","_fetching","has","_requiresRefresh","add","response","_fn","loadTime","Date","getTime","_responseCache","set","delete","_processQueue","Object","values","map","JSON","stringify","value","join","_maxAge","existingQueue","_requestQueue","newQueue","queue","shift","constructor","options","Map","Set","throttle","maxAge","throttledCachedRequest","cachedRequest","bind","total","arr","key","sum","forEach","obj","isNaN","max","Math","downloadStringToFile","filename","text","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","downloadObjArrayAsCsv","objArray","objArrayToCsvString","output","keys","lines","line","replace","getDurationString","duration","estimateInSeconds","floor","minutes","seconds","THROTTLE_RPC","pThrottle","limit","Number","RPC_MAX_TPS","interval","strict","getDlmm","connection","poolAddress","DLMM","create","PublicKey","owner","dlmmPool","userPositions","getPositionsByUserAndLbPair","getSignaturesForAddress","pubKey","before","getAllSignaturesForAddress","address","onSignaturesFound","onDone","newSignatures","allSignatures","signature","undefined","getParsedTransactions","signatures","maxSupportedTransactionVersion","commitment","getParsedAccountInfo","getPositionAddressesFromSignature","txSignature","parser","SolanaParser","idl","IDL","programId","METEORA_PROGRAM_ID","tx","parseTransaction","positions","accounts","data","flat","filter","account","name","Array","from","position","pubkey","toBase58","THROTTLE_METEORA_SUMMARY_API","THROTTLE_METEORA_DETAIL_API","fetchPosition","fetch","METEORA_API","METEORA_API_POSITION_ENDPOINT","positionAddress","fetchDeposits","fetchWithdraws","getPositionData","positionResponse","status","console","warn","errMsg","error","json","getPositionDetails","depositsResponse","withdrawsResponse","all","deposits","withdraws","getPairs","fetcher","pairResponse","METEORA_API_PAIR_ENDPOINT","pairs","parse","lastUpdated","getPairData","pairAddress","find","pair","getPrice","token","JUPITER_PRICE_API","responseJson","getJupiterTokenList","listType","url","JUPITER_TOKEN_STRICT_LIST_API","JUPITER_TOKEN_ALL_LIST_API","tokenList","tokenMap","lamportsToDecimal","lamports","accountInfo","jupiterToken","decimals","parsed","lamportsToUsd","price","getCurrentValue","positionWithMintsAndLbPosition","balances","lbPosition","lastBalance","timestamp_ms_balance_end","balance_age_ms","timestamp_ms_balance_start","mintX","mintY","reward1Mint","reward2Mint","mints","x","y","x_fees","y_fees","reward1","reward2","positionData","totalXAmount","totalYAmount","feeX","feeY","rewardOne","current_usd","unclaimed_fees_usd","unclaimed_rewards_usd","finalizePositionData","summaryData","getSummaryData","postiion","deposit_count","deposits_usd","token_x_usd_amount","token_y_usd_amount","reduce","current","withdraws_count","withdraws_usd","errors","most_recent_deposit_withdraw","deposit","onchain_timestamp","withdraw","claimed_fees_usd","total_fee_usd_claimed","claimed_rewards_usd","total_reward_usd_claimed","getBalances","priorBalance","balanceChanges","tx_id","transaction_type","timestamp_ms","balance_change_usd","sort","a","b","i","currentTx","nextTx","newBalance","tx_id_balance_start","tx_id_balance_end","balance_usd","currentValue","balanceSummary","getBalanceSummary","balance_time_sum_product","balance","total_time","total_time_days","average_balance","balance_points","fee_points","reward_points","position_profit","total_profit","total_points","getPositionProfit","pairInfo","pair_address","pair_name","getPairName","symbol1","symbol2","split","reversedName","group_name","nameIsReversed","includes","group_id","mint_x","mint_y","poolInfo","reward_mint_x","reward_mint_y","getMeteoraPositionAddressesFromParsedTransactions","parsedTransactions","onPositionAddressFound","onClosedPositionFound","positionAddresses","closedAddresses","getPositionAdressFromParsedTransaction","transaction","message","instructions","instruction","matches","getPosition","isClosed","newAddress","getMeteoraProfitForAccountOrSignature","accountOrSignature","callbacks","allPositionAddresses","closedPositionAddresses","allProfits","signatureCount","signaturesChecked","positionsAnalyzed","allSignaturesFound","_processSignatures","onAllSignaturesFound","_checkCompletionCallbacks","positionAddressesFromSignature","validSignatures","_findPositionAddresses","onPositionFound","_getPositionProfit","profit","onProfitAnalyzed","onAllPositionsFound","is_closed","profitSort","profits","descending","sortProfitsByRecentGroupTransactions","groupTimestamps","groupId","groupTime","formatTotalRow","currentRow","firstLast","UserPositionList","sortDescriptor","setSortDescriptor","useState","column","direction","props","positionLoadingState","userProfit","pair_groups","jsx_runtime","jsx","Fragment","totalData","pair_count","position_count","div","className","jsxs","Table","onSortChange","descriptor","TableHeader","TableColumn","allowsSorting","br","TableBody","items","a_percent","b_percent","a_dpercent","b_dpercent","localeCompare","TableRow","TableCell","pairGroup","toLocaleString","currency","minimumFractionDigits","maximumFractionDigits","LoadingItem","loading","Spinner","size","title","MissingTransactionsDownloadButton","identifiedPositionAddresses","missingTransactions","onClick","Button","aria-label","color","startContent","DownloadIcon","AllPositionsDownloadButton","sortedProfits","firstDeposit","lastWithdraw","position_address","pair_group","first_deposit_tx_id","first_deposit_onchain_timestamp","last_withdraw_tx_id","last_withdraw_onchain_timestamp","toISOString","ValidPositionsDownloadButton","validProfitData","LoadingSummary","Card","CardBody","durationString","eta","allPositionsFound","done","Progress","isIndeterminate","showValueLabel","positionProgress","ProfitDisplay","startTime","WalletForm","Input","disabled","label","type","onChange","event","appState","loadTransactions","IndexPage","defaultState","addressCheckCount","pair_group_count","checkPoints","useContext","AppState","walletAddress","setWalletAddress","setLoading","setPositionLoadingState","updatePositionLoadingState","currentState","pctComplete","round","lastTime","time","first","last","pctProgress","previousState","getMeteoraUserProfit","getMeteoraPairGroups","pairPositions","getMeteoraPositionGroups","uniquePairAddresses","positionsWithoutErrors","positionsWithErrors","groups","uniqueGroupIds","pairRollup","pairIdRollups","position_groups","DefaultLayout","section","h1","h4","subtitle","class","target"],"sourceRoot":""}